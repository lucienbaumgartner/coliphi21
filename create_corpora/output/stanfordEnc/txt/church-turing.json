[{"date.published":"1997-01-08","date.changed":"2017-11-10","url":"https://plato.stanford.edu/entries/church-turing/","author1":"B. Jack Copeland","author1.info":"https://www.canterbury.ac.nz/arts/contact-us/people/jack-copeland.html","entry":"church-turing","body.text":"\n\n\nThere are various equivalent formulations of the Church-Turing thesis.\nA common one is that every effective computation can be carried out by\na Turing machine. The Church-Turing thesis is often misunderstood,\nparticularly in recent writing in the philosophy of mind. \n\nThe Church-Turing thesis concerns the concept of an effective\nor systematic or mechanical method in logic,\nmathematics and computer science. ‘Effective’ and its\nsynonyms ‘systematic’ and ‘mechanical’ are\nterms of art in these disciplines: they do not carry their everyday\nmeaning. A method, or procedure, M, for achieving some desired\nresult is called ‘effective’ (or ‘systematic’\nor ‘mechanical’) just in case:  \nA well-known example of an effective method is the truth table test\nfor tautologousness. In principle, a human being who works by rote\ncould apply this test successfully to any formula of the propositional\ncalculus—given sufficient time, tenacity, paper, and pencils\n(although the test is unworkable in practice for any formula\ncontaining more than a few propositional variables).  \nStatements that there is an effective method for achieving\nsuch-and-such a result are commonly expressed by saying that there is\nan effective method for obtaining the values of such-and-such a\nmathematical function. \nFor example, that there is an effective method for determining whether\nor not any given formula of the propositional calculus is a tautology\n(such as the truth table method) is expressed in function-speak by\nsaying that there is an effective method for obtaining the values of a\nfunction, call it T, whose domain is the set of formulae of the\npropositional calculus and whose value for any given formula x,\nwritten \\(T(x)\\), is 1 or 0 according to whether x is, or is\nnot, a tautology. \nThe notion of an effective method is an informal one, and attempts to\ncharacterize effectiveness, such as the above, lack rigor, for the key\nrequirement that the method must demand no insight, intuition or\ningenuity is left unexplicated. \nOne of Alan Turing’s achievements, in his famous paper of 1936,\nwas to present a formally exact predicate with which the informal\npredicate “can be done by means of an effective method”\nmay be replaced (Turing 1936). Alonzo Church, working independently,\ndid the same (Church 1936a). \nThe replacement predicates that Turing and Church proposed were, on\nthe face of it, very different from one another. However, these\npredicates turned out to be equivalent, in the sense that\neach picks out the same set, call it S, of mathematical\nfunctions. The Church-Turing thesis is the assertion that this set\nS contains every function whose values can be obtained\nby a method satisfying the above conditions for effectiveness. \nSince it can also be shown that there are no functions in S\nother than ones whose values can be obtained by a method\nsatisfying the above conditions for effectiveness, the Church-Turing\nthesis licences replacing the informal claim “There is an\neffective method for obtaining the values of function f”\nby the formal claim “f is a member of\nS”—or by any other formal claim equivalent to this\none. \nWhen the Church-Turing thesis is expressed in terms of the replacement\nconcept proposed by Turing, it is appropriate to refer to the thesis\nalso as ‘Turing’s thesis’, and as\n‘Church’s thesis’ when expressed in terms of one or\nanother of the formal replacements proposed by Church. \nThe formal concept proposed by Turing was that of computability by\nTuring machine. He argued for the claim—Turing’s\nthesis—that whenever there is an effective method for obtaining\nthe values of a mathematical function, the function can be computed by\na Turing machine. \nThe converse claim—amounting to the claim mentioned above, that\nthere are no functions in S other than ones whose\nvalues can be obtained by an effective method—is easily\nestablished, since a Turing machine program is itself a specification\nof an effective method. Without exercising any insight, intuition, or\ningenuity, a human being can work through the instructions in the\nprogram and carry out the required operations. \nIf Turing’s thesis is correct, then talk about the existence and\nnon-existence of effective methods can be replaced throughout\nmathematics, logic and computer science by talk about the existence or\nnon-existence of Turing machine programs. \nTuring stated his thesis in numerous places, with varying degrees of\nrigor. The following formulation is one of the most accessible: \nTuring’s thesis:\n\n“L.C.M.s [logical computing machines: Turing’s expression\nfor Turing machines] can do anything that could be described as\n‘rule of thumb’ or ‘purely mechanical’.”\n(Turing 1948: 414)  \nHe adds:  \nThis is sufficiently well established that it is now agreed amongst\nlogicians that “calculable by means of an L.C.M.” is the\ncorrect accurate rendering of such phrases. (Ibid.) \nIn his 1936 paper, titled “On Computable Numbers, with an\nApplication to the Entscheidungsproblem”, Turing wrote: \nAlthough the subject of this paper is ostensibly the computable\nnumbers, it is almost equally easy to define and investigate\ncomputable functions … I have chosen the computable numbers for\nexplicit treatment as involving the least cumbrous technique. (1936:\n58) \nComputable numbers are (real) numbers whose decimal representation can\nbe generated progressively, digit by digit, by a Turing machine.\nExamples are: \nSome real numbers, though, are uncomputable, as Turing\nproved. Turing’s proof pointed to specific examples of\nuncomputable real numbers, but it is easy to see in a general way that\nthere must be real numbers that cannot be computed by any\nTuring machine, since there are more real numbers than there\nare Turing-machine programs. There can be no more Turing-machine\nprograms than there are whole numbers, since the programs can be\ncounted: 1st program, 2nd program, and so on;\nbut, as Georg Cantor proved in 1874,there are vastly more real numbers than whole\nnumbers (Cantor 1874). \nAs Turing said, “it is almost equally easy to define and\ninvestigate computable functions”: there is, in a certain sense,\nlittle difference between a computable number and a computable\nfunction. For example, the computable number .14159… (formed of\nthe digits following the decimal point in π, 3.1419…)\ncorresponds to the computable function: \\(f(1) = 1\\), \\(f(2) = 4\\),\n\\(f(3) = 1\\), \\(f(4) = 5\\), \\(f(6) = 9\\), … . \nAs well as formulations of Turing’s thesis like the one given\nabove, Turing also formulated his thesis in terms of numbers: \n[T]he “computable numbers” include all numbers which would\nnaturally be regarded as computable. (Turing 1936: 58) \nIt is my contention that these operations [the operations of an\nL.C.M.] include all those which are used in the computation of a\nnumber. (Turing 1936: 60)  \nIn the first of these two formulations, Turing is stating that every\nnumber which is able to be calculated by an effective method (that is,\n“all numbers which would naturally be regarded as\ncomputable”) is included among the numbers whose decimal\nrepresentations can be written out progressively by one or another\nTuring machine. In the second, Turing is saying that the operations of\na Turing machine include all those that a human mathematician needs to\nuse when calculating a number by means of an effective method. \nTuring introduced his machines with the intention of providing an\nidealized description of a certain human activity, the tedious one of\nnumerical computation. Until the advent of automatic\ncomputing machines, this was the occupation of many thousands of\npeople in business, government, and research establishments. These\nhuman rote-workers were in fact called computers. Human\ncomputers used effective methods to carry out some aspects of the work\nnowadays done by electronic computers. The Church-Turing thesis is\nabout computation as this term was used in 1936, viz. human\ncomputation (to read more on this, turn to the\n section 3). \nFor instance, when Turing says that the operations of an L.C.M.\ninclude all those needed “in the computation of a number”,\nhe means “in the computation of a number by a human\nbeing”, since that is what computation was in those days.\nSimilarly “numbers which would naturally be regarded as\ncomputable” are numbers which would be regarded as computable by\na human computer, a human being who is working solely in accordance\nwith an effective method. \nTuring introduced his thesis in the course of arguing that the\nEntscheidungsproblem, or decision problem, for the functional\ncalculus—also known as the first-order predicate\ncalculus—is unsolvable. This problem was first posed by David\nHilbert (Hilbert and Ackermann 1928). As explained by Turing (1936:\n84), Hilbert’s Entscheidungsproblem is this: Is\nthere a general (effective) process for determining whether a given\nformula A of the functional calculus is provable? \nThe truth table test is such a method for the propositional calculus.\nHowever, Turing showed that, given his thesis, there can be\nno effective method in the case of the full first-order\npredicate calculus. \nHe proved formally that no Turing machine can tell, of each formula of the predicate\ncalculus, whether or not the formula is a theorem of the calculus (provided the machine is limited to a finite number of steps when testing a formula for theoremhood). So, given his thesis\nthat if an effective method exists then it can be carried out by one\nof his machines, it follows that there is no such method.  \nChurch stated the Entscheidungsproblem more generally:  \nA few months before Turing, Church arrived at the same negative result\nconcerning the decidability of the functional calculus. They\ndiscovered this result quite independently of one another. Church\nemployed the concept of lambda-definability\n(λ-definability) where Turing used computability by an\nL.C.M. \nThe concept of a lambda-definable function is due to Church and his\nstudent Stephen Kleene (Church 1932, 1936a, 1941; Kleene 1935). A\nfunction is said to be lambda-definable if the values of the function\ncan be obtained by a certain process of repeated substitution. \nWhere Turing used the term ‘purely mechanical’, Church\nused ‘effectively calculable’ to indicate that there is an\neffective method for obtaining the values of the function. He proposed\nthat we \nThe concept of a recursive function is due to Kurt Gödel and\nJacques Herbrand (Gödel 1934; Herbrand 1932). The class of\nlambda-definable functions (of positive integers) and the class of\nrecursive functions (of positive integers) are identical. This was\nproved by Church and Kleene (Church 1936a; Kleene 1936). \nAfter learning of Church’s 1936 proposal to identify\neffectiveness with lambda-definability (while preparing his own paper for publication) Turing quickly established that\nthe concept of lambda-definability and his concept of\ncomputability are equivalent (by proving the “theorem that all\n… λ-definable sequences … are computable”\nand its converse; 1936: 88ff). Thus, in Church’s proposal, the\nwords “λ-definable function of positive integers”\n(and equally the words “recursive function of positive\nintegers”) can be replaced by “function of positive\nintegers that is computable by Turing machine”.  \nEmil Post referred to Church’s identification of effective\ncalculability with recursiveness and lambda-definability as a\n‘working hypothesis’, and he quite properly criticized\nChurch for masking this hypothesis as a definition: \nThis, then, is the ‘working hypothesis’ that, in effect,\nChurch proposed:  \nChurch’s thesis:\n\nA function of positive integers is effectively calculable only if\nlambda-definable (or, equivalently, recursive).\n \nThe reverse implication, that every lambda-definable function of\npositive integers is effectively calculable, is commonly referred to\nas the converse of Church’s thesis, although Church\nhimself did not so distinguish (bundling both theses together in his\n‘definition’). \nIf attention is restricted to functions of positive integers,\nChurch’s thesis and Turing’s thesis are\nextensionally equivalent. ‘Extensionally\nequivalent’ means that the two theses are about one and the same\nclass of functions: in view of the previously mentioned results by\nChurch, Kleene and Turing, the class of lambda-definable functions (of\npositive integers) is identical to the class of recursive functions\n(of positive integers) and to the class of computable functions (of\npositive integers). Notice, though, that while the two theses are\nequivalent in this sense, they nevertheless have distinct meanings and\nso are two different theses. One important difference between\nthe two is that Turing’s thesis concerns computing\nmachines, whereas Church’s does not. \nConcerning the origin of the terms ‘Church’s thesis’\nand ‘Turing’s thesis’, Kleene seems to have been the\nfirst to use the word ‘thesis’ in this connection: in\n1952, he introduced the name ‘Church’s thesis’ for\nthe proposition that every effectively calculable function (on the\nnatural numbers) is recursive (Kleene 1952: 300, 301, 317). The term\n‘Church-Turing thesis’ also seems to have originated with\nKleene—with a flourish of bias in favour of his mentor\nChurch: \nSo Turing’s and Church’s theses are equivalent. We shall\nusually refer to them both as Church’s thesis, or in\nconnection with that one of its … versions which deals with\n‘Turing machines’ as the Church-Turing thesis.\n(Kleene 1967: 232) \nSome prefer the name Turing-Church thesis. \nOne way in which the two men’s approaches differed was that\nTuring’s concerns were rather more general than Church’s,\nin that (as indicated previously) Church considered only functions of\npositive integers, whereas Turing described his work as encompassing\n“computable functions of an integral variable or a real or\ncomputable variable, computable predicates, and so forth” (1936:\n58). Turing intended to pursue the theory of computable functions of a\nreal variable in a subsequent paper, but in fact did not do so. \nA greater difference lay in the profound significance of\nTuring’s approach for the emerging science of automatic\ncomputation. Church’s approach did not mention computing\nmachinery, whereas Turing’s introduced the ‘Turing\nmachine’, as Church dubbed it in his 1937a review of\nTuring’s paper—Turing’s abstract computing machine\nthat encapsulates the fundamental logical principles of the\nstored-program, all-purpose digital computer. \nIn his review of Turing’s work, Church himself acknowledged the\nsuperiority of Turing’s analysis of effectiveness, saying: \ncomputability by a Turing machine … has the advantage of making\nthe identification with effectiveness in the ordinary (not explicitly\ndefined) sense evident immediately. (Church 1937a: 43) \nGödel also found Turing’s analysis superior. Kleene related\nthat Gödel was unpersuaded by Church’s thesis until he saw\nTuring’s formulation:  \nAccording to a November 29, 1935, letter from Church to me, Gödel\n“regarded as thoroughly unsatisfactory” Church’s\nproposal to use λ-definability as a definition of effective\ncalculability. … It seems that only after Turing’s\nformulation appeared did Gödel accept Church’s thesis.\n(Kleene 1981: 59, 61) \nGödel described Turing’s analysis of computability as\n“most satisfactory” and “correct … beyond any\ndoubt” (Gödel 1951: 304 and *193?: 168). He remarked:  \nWe had not perceived the sharp concept of mechanical procedures\nsharply before Turing, who brought us to the right perspective.\n(Quoted in Wang 1974: 85) \nGödel also said: \nThe resulting definition of the concept of mechanical by the sharp\nconcept of “performable by a Turing machine” is both\ncorrect and unique. … Moreover it is absolutely impossible that\nanybody who understands the question and knows Turing’s\ndefinition should decide for a different concept. (Quoted in Wang\n1996: 203) \nIt was Turing’s work, Gödel emphasized, that enabled him to\ngeneralize his incompleteness result of 1931 (originally directed\nspecifically at the formal system set out by Whitehead and Russell in\ntheir Principia Mathematica) to “every\nconsistent formal system containing a certain amount of finitary\nnumber theory” (Gödel in Davis 1965: 71). \nEven the modest young Turing agreed that his analysis was\n“possibly more convincing” than Church’s (Turing\n1937: 153). \nWhile there have from time to time been attempts to call the\nChurch-Turing thesis into question (for example by\nLászló Kalmár in his 1959; Elliot Mendelson\nreplied in his 1963), the summary of the situation that Turing gave in\n1948 is no less true today: “it is now agreed amongst logicians\nthat ‘calculable by L.C.M.’ is the correct accurate\nrendering” of the informal concept of effectiveness. \nMuch evidence has amassed for the ‘working hypothesis’\nproposed by Church and Turing in 1936. One of the fullest surveys is\nto be found in chapters 12 and 13 of Kleene’s 1952. In\nsummary: \n(3) is often considered (although not in fact by Kleene himself) to be\nvery strong evidence for the thesis, because of the diversity\nof the various formal analyses involved. For example, apart from the\nanalyses already mentioned in terms of lambda-definability and\nrecursiveness—and, of course, Turing-machine\ncomputability—there are analyses in terms of register machines\n(Shepherdson and Sturgis 1963), Post’s canonical and normal\nsystems (Post 1943, 1946), combinatory definability (Schönfinkel\n1924; Curry 1929, 1930, 1932), Markov algorithms (Markov 1960), and\nGödel’s notion of reckonability (Gödel 1936; Kleene\n1952). \n(3) may be summed up by saying that the concept of effective\ncalculability—or the concept of computability\nsimpliciter—has turned out to be formalism-independent,\nin that all these different formalisms pick out exactly the\nsame class of functions. Gödel emphasised the importance\nof formalism-independence in remarks he made in 1946 (Kennedy 2013\ngives a discussion of these remarks). Gödel said that “the\ngreat importance … [of] Turing’s computability”\nis \nlargely due to the fact that with this concept one has for the first\ntime succeeded in giving an absolute definition of an interesting\nepistemological notion, i.e., one not depending on the formalism\nchosen. (Gödel 1946: 150) \nOutstanding among the reasons for accepting the thesis are two\narguments that Turing gave in Section 9 of “On Computable\nNumbers”. He referred to these arguments simply as\n‘I’ and ‘II’. Turing’s argument I\ninvolves a number of plausible assumptions about human computers.\nThese include the following (1936: 75–76): \nTuring argued that, given his various assumptions about human\ncomputers, the work of any human computer can be taken over by a\nTuring machine. Whatever sequence the human computer is computing, a\nTuring machine “can be constructed to compute the same\nsequence”, Turing said (1936: 77). Therefore (argument I\nconcludes) any humanly computable number—or, more generally,\nsequence of symbols—is also computable by Turing machine. \nTuring’s argument II hinges on a proposition we may call \nTuring’s provability theorem:\n\nEvery formula provable in Hilbert’s first-order predicate\ncalculus can be proved by the universal Turing machine. (See Turing\n1936: 77) \nArgument II is the subject of the next section.  \nA significant recent contribution to the area has been made by Kripke\n(2013). A conventional view of the status of the Church-Turing thesis\nis that, while “very considerable intuitive evidence” has\namassed for the thesis, the thesis is “not a precise enough\nissue to be itself susceptible to mathematical treatment”, as\nKripke puts it (2013: 77). Kleene gave an early expression of this now\nconventional view: \nSince our original notion of effective calculability of a function\n… is a somewhat vague intuitive one, the thesis cannot be\nproved. … While we cannot prove Church’s thesis, since\nits role is to delimit precisely an hitherto vaguely conceived\ntotality, we require evidence …. (Kleene 1952: 318) \nRejecting the conventional view, Kripke suggests that, on the\ncontrary, the Church-Turing thesis is susceptible to mathematical\nproof. Furthermore he canvasses the idea that Turing himself sketched\nan argument that serves to prove the thesis. \nAs previously mentioned, Section 9 of Turing’s 1936 paper\noffered a number of arguments for the thesis. Kripke attempts to build\na mathematical demonstration of the Church-Turing thesis around the\nsecond of these, Turing’s II, claiming that his demonstration is\n“very close” to Turing’s (Kripke 2013: 80).\n(Although Kripke admits that he does “not find [Turing’s]\nargument II to be entirely clearly presented” (2013: 81) and, in\nits detail, the Kripke argument differs from Turing’s argument.)\n \nKripke argues that the Church-Turing thesis is a corollary of\nGödel’s completeness theorem for first-order predicate\ncalculus with identity. Put somewhat crudely, the latter theorem\nstates that every valid deduction (couched in the language of\nfirst-order predicate calculus with identity) is provable in\nthe calculus. In other words, the deduction of B from premises\n\\(A_{1}\\), \\(A_{2}\\), … \\(A_{n}\\) (where statements \\(A_{1}\\),\n\\(A_{2}\\), … \\(A_{n}\\), B are all in the language of\nfirst-order predicate calculus with identity) is logically valid if\nand only if B can be proved from \\(A_{1}\\), \\(A_{2}\\), …\n\\(A_{n}\\) in the calculus. \nThe first step of the Kripke argument is his claim that (error-free,\nhuman) computation is itself a form of deduction: \n[A] computation is a special form of mathematical argument. One is\ngiven a set of instructions, and the steps in the computation are\nsupposed to follow—follow deductively—from the\ninstructions as given. So a computation is just another\nmathematical deduction, albeit one of a very specialized form.\n(Kripke 2013: 80) \nThe following two-line program in pseudo-code illustrates\nKripke’s claim. The symbol ‘\\(\\rightarrow\\)’ is read\n‘becomes’, and ‘=’ as usual means identity.\nThe first instruction in the program is \n\n\\[r \\rightarrow 2\\]\n\n This tells the\ncomputer to place the value 2 in storage location r (assumed to\nbe initially empty). The second instruction \n\n\\[r \\rightarrow r + 3\\]\n\n tells the\ncomputer to add 3 to the content of r and store the result in\nr (over-writing the previous content of r). The\nexecution of this two-line program can be represented as a\ndeduction: \n[Execution of \\(r \\rightarrow 2\\), followed immediately by execution\nof \\(r \\rightarrow r + 3\\)] logically entails that \\(r = 5\\) in the\nimmediately resulting state.  \nIn the case of Turing-machine programs, Turing developed a detailed\nlogical notation for expressing all such deductions (Turing 1936). \n(In fact, the successful execution of any string of\ninstructions can be represented deductively in this\nfashion—Kripke has not drawn attention to a feature special to\ncomputation. The instructions do not need to be ones that a computer\ncan carry out.) \nThe second step of Kripke’s argument is to appeal to what he\ncalls Hilbert’s thesis (attributing the name to Martin\nDavis): this is the thesis that the steps of any mathematical argument\ncan be expressed “in a language based on first-order logic (with\nidentity)” (Kripke 2013: 81). \nApplying Hilbert’s thesis to Kripke’s above quoted claim\nthat “a computation is just another mathematical\ndeduction” (2013: 80) yields:  \nevery (human) computation can be formalized as a valid deduction\ncouched in the language of first-order predicate calculus with\nidentity. \nNow, applying Gödel’s completeness theorem to this yields\nin turn:  \nevery (human) computation is provable in first-order predicate\ncalculus with identity, in the sense that, given an appropriate\nformalization, each step of the computation can be derived from the\ninstructions (possibly in conjunction with ancillary premises, e.g., well-known\nmathematical premises, or premises concerning numbers that are\nsupplied to the computer at the start of the computation). \nFinally, applying Turing’s provability theorem to this\nintermediate conclusion yields the Church-Turing thesis:  \nevery (human) computation can be done by Turing machine. \nNachum Dershowitz and Yuri Gurevich and (independently) Wilfried Sieg\nhave also argued that the Church-Turing thesis is susceptible to\nmathematical proof. Sieg focusses on Turing’s argument I,\noffering an axiomatized version of it in his 2002 and 2008 (for a\ncritique of Sieg’s approach see Shagrir 2006). In their 2008\nDershowitz and Gurevich offer “a proof of Church’s Thesis,\nas Gödel and others suggested may be possible” (2008, 299),\nadding: \nIn a similar way, but with a different set of basic operations, one\ncan prove Turing’s Thesis, … . (Dershowitz and Gurevich\n2008: 299) \nTuring’s own view of the status of his thesis is very different\nfrom that expressed by Kripke, Sieg, and Dershowitz and Gurevich.\nAccording to Turing, his thesis is not susceptible to mathematical\nproof. He did not consider either argument I or argument II to be a\nmathematical demonstration of his thesis: he asserted that I and II,\nand indeed “[a]ll arguments which can be given” for the\nthesis, are \nfundamentally, appeals to intuition, and for this reason rather\nunsatisfactory mathematically. (Turing 1936: 74) \nIndeed, Turing might have regarded Hilbert’s thesis as itself an\nexample of a proposition that can be justified only by appeals to\nintuition. \nTuring discussed a thesis that is closely related to Turing’s\nthesis, namely for every systematic method there is a\ncorresponding substitution-puzzle (where\n‘substitution-puzzle’, like ‘computable by Turing\nmachine’, is a rigorously defined concept). He said: \nThe statement is … one which one does not attempt to prove.\nPropaganda is more appropriate to it than proof, for its status is\nsomething between a theorem and a definition. (Turing 1954: 588) \nProbably Turing would have taken this remark to apply equally to the\nthesis (Turing’s thesis) that for every systematic method\nthere is a corresponding Turing machine. He also said (in\nhandwritten material published in 2004) that the phrase\n‘systematic method’ \nis a phrase which, like many others e.g., ‘vegetable’ one\nunderstands well enough in the ordinary way. But one can have\ndifficulties when speaking to greengrocers or microbiologists or when\nplaying ‘twenty questions’. Are rhubarb and tomatoes\nvegetables or fruits? Is coal vegetable or mineral? What about coal\ngas, marrow, fossilised trees, streptococci, viruses? Has the lettuce\nI ate at lunch yet become animal? … The same sort of difficulty\narises about question c) above [Is there a systematic method by\nwhich I can answer such-and-such questions?]. An ordinary sort of\nacquaintance with the meaning of the phrase ‘systematic\nmethod’ won’t do, because one has got to be able to say\nquite clearly about any kind of method that might be proposed whether\nit is allowable or not. (Turing in Copeland 2004b: 590) \nHere Turing is emphasizing that the term ‘systematic\nmethod’ is not exact, and so in that respect is like the term\n‘vegetable’ but unlike mathematically precise terms, such\nas ‘λ-definable’, ‘Turing-machine\ncomputable’, and ‘substitution-puzzle’. Hence his\nclaim that the appropriate way to support a statement that pairs\nsystematic methods with items falling under a mathematically precise\ndescription is to offer ‘propaganda’, rather than to\nattempt to prove it. \nUnfortunately a myth has arisen concerning Turing’s paper of\n1936, namely that he there gave a treatment of the limits of\nmechanism, and established a fundamental result to the effect\nthat the universal Turing machine can simulate the behaviour of\nany machine. This myth has passed into the philosophy of\nmind, theoretical psychology, cognitive science, computer science,\nArtificial Intelligence, Artificial Life, and\nelsewhere—generally to pernicious effect. \nFor example, the Oxford Companion to the Mind states: \nTuring showed that his very simple machine … can specify the\nsteps required for the solution of any problem that can be solved by\ninstructions, explicitly stated rules, or procedures. (Richard Gregory\nwriting in his 1987: 784) \nDaniel Dennett maintains that \nTuring had proven—and this is probably his greatest\ncontribution—that his Universal Turing machine can compute any\nfunction that any computer, with any architecture, can compute\n(1991: 215) \nand also that every \ntask for which there is a clear recipe composed of simple steps can be\nperformed by a very simple computer, a universal Turing machine, the\nuniversal recipe-follower. (1978: xviii) \nPaul and Patricia Churchland assert that Turing’s \nresults entail something remarkable, namely that a standard digital\ncomputer, given only the right program, a large enough memory and\nsufficient time, can compute any rule-governed input-output\nfunction. That is, it can display any systematic pattern of responses\nto the environment whatsoever. (1990: 26) \nThese various quotations are typical of writing on the foundations of\ncomputer science and computational theories of mind. The claims made\nare true, however, only if the general terms ‘explicitly stated\nrule’, ‘instruction’, ‘clear recipe composed\nof simple steps’, and so forth, are restricted in such\na way as to refer only to what can be done by means of effective\nmethods. Turing did not show that his machines can solve any\nproblem that can be solved “by instructions, explicitly stated\nrules, or procedures” (Gregory 1987), and nor did he prove that the universal\nTuring machine “can compute any function that any computer, with\nany architecture, can compute” (Dennett 1991). Nor do his results entail that a\nstandard digital computer “can compute any\nrule-governed input-output function” (Churchland and Churchland 1990). \nIn reality Turing proved that his universal machine can compute any\nfunction that any Turing machine can compute; and he put forward, and\nadvanced philosophical arguments in support of, the thesis that\neffective methods are to be identified with methods that the universal\nTuring machine is able to carry out. The sweeping claims just quoted\ngo far beyond Turing’s own words. \nThe Church-Turing thesis is a thesis about the extent of effective\nmethods, and therein lies its mathematical importance. Putting this\nanother way, the thesis concerns what a human being can\nachieve when working by rote, with paper and pencil (ignoring\ncontingencies such as boredom, death, or insufficiency of paper). The\nthesis carries no implication concerning the extent of what\nmachines are capable of achieving (even digital machines\nacting in accordance with “explicitly stated rules” (Gregory 1987)).\nBecause, among a machine’s repertoire of basic operations, there\nmay be operations that a human being working by rote with paper and\npencil cannot perform. \nEssentially, then, the Church-Turing thesis says that no human\ncomputer, or machine that mimics a human computer, can out-compute the\nuniversal Turing machine. However, a variety of other propositions,\nvery different from the Church-Turing thesis properly so called, are\nfrom time to time dubbed the Church-Turing thesis (or Church’s\nthesis)—sometimes, but not always, with accompanying hedges,\nsuch as ‘strong form’ and ‘physical version’.\nFor instance, the claim that the universal Turing machine can do any\nmathematical task that can be done by any machine—a\nclaim very different from Turing’s—is sometimes referred\nto as the Church-Turing thesis. \nThis loosening of established terminology is unfortunate, since it can\neasily lead to misunderstandings and confusion. Some examples from the\nliterature of this loosening are: \nconnectionist models … may possibly even challenge the strong\nconstrual of Church’s Thesis as the claim that the class of\nwell-defined computations is exhausted by those of Turing machines.\n(Smolensky 1988: 3) \nThat there exists a most general formulation of machine and that it\nleads to a unique set of input-output functions has come to be called\nChurch’s thesis. (Newell 1980: 150) \nChurch-Turing thesis: If there is a well defined procedure for\nmanipulating symbols, then a Turing machine can be designed to do the\nprocedure. (Henry 1993: 149) \n[I]t is difficult to see how any language that could actually be run\non a physical computer could do more than Fortran can do. The idea\nthat there is no such language is called Church’s thesis.\n(Geroch and Hartle 1986: 539) \nAlso, more distant still from anything that Church or Turing actually\nwrote: \nThe first aspect that we examine of Church’s Thesis …\n[w]e can formulate, more precisely: The behaviour of any discrete\nphysical system evolving according to local mechanical laws is\nrecursive. (Odifreddi 1989: 107) \nI can now state the physical version of the Church-Turing principle:\n“Every finitely realizable physical system can be perfectly\nsimulated by a universal model computing machine operating by finite\nmeans”. This formulation is both better defined and more\nphysical than Turing’s own way of expressing it. (Deutsch 1985:\n99) \nThe latter is indeed “more physical” than Turing’s\nthesis. It is, though, a completely different claim from\nTuring’s own, and so it is misleading to present it as a\n“better defined” version of what Turing said. Turing and\nChurch were talking about effective methods, not finitely realizable\nphysical systems. Although the phrase “physical version of the\nChurch-Turing thesis” is reasonably common in the current\nliterature, it is better avoided, since neither Church nor Turing\nendorsed, nor even formulated, any such proposition. \nSimilarly: \n[T]he Physical Church-Turing Thesis … is the conjecture that\nwhatever physical computing device (in the broader sense) or physical\nthought-experiment will be designed by any future civilization, it\nwill always be simulateable by a Turing machine. (Andréka,\nNémeti, and Németi 2009: 500)  \nThese writers go on to assert that what they call the ‘Physical\nChurch-Turing Thesis’ \nwas formulated and generally accepted in the 1930s. (Ibid.) \nYet it was not the conjecture that these writers set out in\nthe quote, but Turing’s and Church’s theses properly so\ncalled, that were formulated and generally accepted in the 1930s and\n1940s. \nIt is important to distinguish between the Church-Turing thesis\nproperly so called and what I term the ‘maximality thesis’\n(Copeland 2000). \nFirst, some terminology. A machine m will be said to be able to\ngenerate a certain function (e.g., x squared) if\nm can be set up so that if m is presented with any of\nthe function’s arguments (e.g., 4), m will carry out some\nsequence of processing steps, at the end of which m produces\nthe corresponding value of the function (16 in the example).\nMutatis mutandis for functions that, like addition, demand\nmore than one argument. \nMaximality thesis:\n\nAll functions that can be generated by machines (working in accordance\nwith a finite program of instructions) are computable by effective\nmethods. \nRobin Gandy is one of the few writers to have distinguished explicitly\nbetween Turing’s thesis and the stronger proposition that\nwhatever can be calculated by a machine can be calculated by a\nTuring machine (Gandy 1980). Gandy called his own formulation of\nthe maximality thesis ‘Thesis M’. (Gandy’s argument\nfor his Thesis M is evaluated in Copeland and Shagrir 2007.) \nIt is worth noting the existence in the literature of another practice\nwith the potential to mislead the unwary. (Although, unlike the\nterminological practices complained about above, this one is in itself\nperfectly acceptable.) In technical material, including textbooks, the\nword ‘computable’ is often tied by definition to\neffectiveness. Thus a function is said to be computable if and only if\nthere is an effective method for obtaining its values. If\n‘computable’ is used in this way, then the maximality\nthesis can be stated more simply: All functions that can be generated\nby machines (working in accordance with a finite program of\ninstructions) are computable. \nA common formulation of the Church-Turing thesis in the technical\nliterature is the following, where ‘computable’ is being\nused synonymously with ‘effectively computable’: \nAll computable functions are computable by Turing machine. \nTuring himself uses ‘computable’ in this way, for instance\nin the following formulation of his thesis, mentioned earlier: \n[T]he ‘computable numbers’ include all numbers which would\nnaturally be regarded as computable. (Turing 1936: 58) \nEntailments such as the following are sometimes offered in the\nliterature: \ncertain functions are uncomputable in an absolute sense: uncomputable\neven by [standard Turing machine], and, therefore, uncomputable by any\npast, present, or future real machine. (Boolos and Jeffrey 1980:\n55) \nBecause the word ‘computable’ is here being employed\nsynonymously with ‘computable by an effective method’,\nthis statement is entailed by the Church-Turing thesis, in conjunction\nwith Turing’s result that there exist functions uncomputable by\nany standard Turing machine. However, to a casual reader of the\ntechnical literature, this statement and others like it may appear to\nsay more than they in fact do. That a function is\nuncomputable, in this sense, by any past, present, or future\nreal machine, does not entail that the function in question\ncannot be generated by some real machine (past, present, or\nfuture). \nThe terminological decision to tie the term\n‘computable’ (and its cognates) to the concept of\neffectiveness does lead to the truth of: \nNo possible computing machine can generate a function that\nthe universal Turing machine cannot. But the question of the truth or falsity of the maximality thesis\nitself remains open.  Although the terminological decision, if\naccepted, does prevent one from describing any machine putatively\nfalsifying the maximality thesis as computing the function\nthat it generates. \nSome authors use phrases such as “computation in a broad\nsense” to indicate that they mean computation in a form\npotentially transcending effective methods (e.g., Copeland 1997;\nAndréka, Németi and Németi 2009). \nThere is a world of difference between the technical and everyday\nmeanings of the word ‘mechanical’. In technical usage, the\nterm ‘mechanical’, like the term ‘computable’,\nis tied to effectiveness, and in the technical literature\n‘mechanical’ and ‘effective’ are usually used\ninterchangeably (Gandy 1988 outlines the history of this use of the\nword ‘mechanical’). For example, statements like the\nfollowing are to be found: \nTuring proposed that a certain class of abstract machines could\nperform any ‘mechanical’ computing procedure. (Mendelson\n1964: 229) \nUnderstood correctly, this remark attributes to Turing not the\nmaximality thesis but Turing’s thesis properly so-called. \nThis technical usage of ‘mechanical’ has a tendency to\nobscure the possibility of there being machines (or biological organs)\nthat generate functions not able to be generated by standard Turing\nmachines. The question “Can a machine execute a\nprocedure that is not mechanical?” may appear\nself-answering—yet this is precisely what is asked if the\nmaximality thesis is questioned. \nThe maximality thesis admits of two interpretations, according to\nwhether the phrase “can be generated by machine” is taken\nin the this-worldly sense of “can be generated by a machine that\nconforms to the physical laws (if not perhaps to the resource\nconstraints) of the actual world” [the weaker form], or in a\nsense that abstracts from whether or not the envisaged machine could\nexist in the actual world [the stronger form]. The stronger-weaker\nterminology is intended to reflect the fact that the stronger form\nentails the weaker, but not vice versa. \nThe stronger form of the maximality thesis is known to be false. This\ncan be shown by providing an example of a machine that works in\naccordance with a finite program of instructions in order to generate\na function that is not computable by any standard Turing machine; and\nso, by Turing’s thesis, is not computable by an effective\nmethod. Although a single example suffices to show that the thesis is\nfalse, two examples are given here. \nExtended Turing Machines (ETMs) were invented by Fred Abramson (1971).\nAn ETM is exactly like a standard Turing machine except that, whereas\na standard Turing machine stores only a single discrete symbol on each\n(non-blank) square of its tape (e.g., ‘0’ or\n‘1’), a single square of an ETM’s tape can store any\ndesired real number, for example π, or even an\nuncomputable real number. (The method of storing real numbers on the\ntape is left unspecified in this purely logical model.) \nAs previously explained, Turing established the existence of real\nnumbers that cannot be computed by standard Turing machines (Turing\n1936). These numbers are usually called ‘uncomputable\nnumbers’, but, in a broad sense of ‘compute’, ETMs\ncan compute them. Abramson also proved that ETMs are able to generate\nfunctions not capable of being computed by any standard Turing\nmachine. It follows, by Turing’s thesis, that these functions\nare not computable by effective methods. Therefore, ETMs form\ncounterexamples to the stronger form of the maximality thesis. \nAccelerating Turing machines (ATMs) are exactly like standard Turing\nmachines except that their speed of operation accelerates as the\ncomputation proceeds (Stewart 1991; Copeland 1998a,b, 2002a; Copeland\nand Shagrir 2011): an ATM performs the second operation called for by\nits program in half the time taken to perform the first, the third in\nhalf the time taken to perform the second, and so on. \nIf the time taken to perform the first operation is called one\n‘moment’, then the second operation is performed in half a\nmoment, the third operation in quarter of a moment, and so on. Since \nan ATM is able to perform infinitely many\noperations in 2 moments of operating time. This enables ATMs to\ngenerate functions that cannot be computed by any standard Turing\nmachine. \nOne example of such a function is the halting function\nh. \\(h(n) = 1\\) if the nth (standard) Turing\nmachine halts, and \\(h(n) = 0\\) if the nth (standard) Turing\nmachine runs on endlessly. It is well known that no standard Turing\nmachine can generate this function (Davis 1958); but an ATM can\nproduce any of the function’s values in a finite period of\ntime. \nWhen computing \\(h(n)\\), the ATM’s first step is write\n‘0’ on a square of the tape called the answer square\n(A). The ATM then proceeds to simulate the actions of the\nnth Turing machine. If the ATM finds that the nth\nmachine halts, then the ATM goes on to erase the ‘0’ that\nit previously wrote on A, replacing this by ‘1’.\nIf, on the other hand, the nth machine does not halt, the ATM\nnever returns to square A to erase the ‘0’\noriginally written there. Either way, once two moments of operating\ntime have elapsed, A contains the value \\(h(n)\\) (Copeland\n1998a). \nSo, again, ATMs form counterexamples to the stronger form of the\nmaximality thesis.  \nA hypercomputer is any information-processing machine\n(notional or real) that is able to achieve more than Turing’s\nhuman rote-worker can in principle achieve (see the entry on\n computation in physical systems).\n The term ‘hypercomputer’ was introduced in Copeland and\nProudfoot 1999a. Hypercomputers compute (in a broad sense of\n‘compute’) functions or numbers—or, more generally,\nsolve problems or carry out information-processing tasks—that\nlie beyond the reach of the universal Turing machine (see Copeland\n2002b, 2004a; Copeland and Proudfoot 2012; Syropoulos 2008). ETMs and\nATMs are examples of—notional—hypercomputers. \nThe weaker form of the maximality thesis would be falsified by the\nactual existence of a physical hypercomputer. Speculation stretches\nback over at least five decades that there may be real physical\nprocesses—and so, potentially, real\nmachine-operations—whose behaviour conforms to functions not\ncomputable by any standard Turing machine. See, for example,\nScarpellini 1963; Kreisel 1967, 1974, 1982; Pour-El and Richards 1979,\n1981; Doyle 1982; Geroch and Hartle 1986; Pitowsky 1990; Stannett\n1990; da Costa and Doria 1991, 1994; Hogarth 1994; and Siegelmann and\nSontag 1994. At the close of the 20th century Copeland and\nSylvan gave an evangelical survey of the emerging field in their 1999.\n \nTo summarize the situation with respect to the weaker form of the\nmaximality thesis: At the present time, it remains unknown whether\nhypercomputation is permitted or excluded by the contingencies of the\nactual universe. It is, therefore, an open empirical question whether\nor not the weaker form of the maximality thesis is true. \nA common but spurious argument for the maximality thesis, which we may\ncall the ‘equivalence fallacy’, cites the fact, noted\nabove, that many different attempts to analyze the informal notion of\nan effective method in precise terms—by Turing, Church, Post,\nAndrei Andreevich Markov, and others—turned out to be\nequivalent to one another, in the sense that each analysis\nprovably picks out the same class of functions, namely those functions\ncomputable by (standard) Turing machines. \nAs previously mentioned, this convergence of analyses is generally\nconsidered very strong evidence for the Church-Turing thesis, because\nof the diversity of the analyses. However, this convergence is\nsometimes taken to be evidence for the maximality thesis. Allen\nNewell, for example, cites the convergence as showing that  \nall attempts to … formulate … general notions of\nmechanism … lead to classes of machines that are equivalent in\nthat they encompass in toto exactly the same set of\ninput-output functions;  \nand, he says, the various equivalent analyses constitute a  \nlarge zoo of different formulations of maximal classes of machines.\n(Newell 1980: 150)  \nYet the analyses Newell is discussing are of the concept of an\neffective method, not of the concept of a machine-generatable\nfunction. The equivalence of the analyses bears only on the question\nof the extent of what is humanly computable, not on the question of\nwhether the functions generatable by machines could extend beyond the\nfunctions generatable by human computers (even human computers who\nwork forever and have access to unlimited quantities of paper and\npencils). Indeed, Newell’s argument is undercut by the existence\nof (notional) machines capable of generating functions that, given\nTuring’s thesis, cannot be generated by any effective\nmethod. \nThe error of confusing the Church-Turing thesis properly so called\nwith one or another form of the maximality thesis has led to some\nremarkable claims in the foundations of psychology. For example, one\nfrequently encounters the view that psychology must be\ncapable of being expressed ultimately in terms of the Turing machine\n(e.g., Fodor 1981: 130; Boden 1988: 259). To one who makes this error,\nconceptual space will seem to contain no room for mechanical models of\nthe mind that are not equivalent to Turing machines. Yet it is\ncertainly possible that psychology will find the need to employ models\nof human cognition transcending Turing machines. \nA similar confusion is found in Artificial Life. Christopher Langton,\nthe leading pioneer of A-Life, said the following when writing about\nfoundational matters: \nThere are certain behaviours that are\n‘uncomputable’—behaviours for which no\nformal specification can be given for a machine that will exhibit that\nbehaviour. The classic example of this sort of limitation is\nTuring’s famous Halting Problem: can we give a formal\nspecification for a machine which, when provided with the description\nof any other machine together with its initial state, will\n… determine whether or not that machine will reach its halt\nstate? Turing proved that no such machine can be specified. (Langton\n1989: 12) \nHowever, Turing certainly did not prove that no such machine\ncan be specified. All that Turing’s results tell us is that if\nthere is such a machine, then it is not a Turing machine. It is also\nworth mentioning that, although the Halting Problem is very commonly\nattributed to Turing (as Langton does here), Turing did not in fact\nformulate it. The Halting Problem originated with Martin Davis,\nprobably in 1952 (Davis 1958: 70). \nNo doubt many have been misled by the practice in the literature of\nusing the terms ‘Church’s thesis’ and\n‘Church-Turing thesis’ to refer indiscriminately not only\nto a thesis concerning which there is little real doubt, the\nChurch-Turing thesis properly so called, but also a medley of\ndifferent theses, of unknown truth-value. \nThe maximality thesis is by no means the only thesis commonly\nmislabelled as the ‘Church-Turing thesis’. Another example\nis the simulation thesis. A widespread mistake in modern\nwriting on computability and the brain is to hold that Turing’s\nresults somehow entail that the brain, and indeed any biological or\n\nphysical system whatever, can be simulated by a Turing\nmachine. \nFor example, the entry on Turing in the Blackwell Companion to the\nPhilosophy of Mind contains the following claims:  \nwe can depend on there being a Turing machine that captures the\nfunctional relations of the brain,  \nfor so long as  \nthese relations between input and output are functionally well-behaved\nenough to be describable by … mathematical relationships\n… we know that some specific version of a Turing machine will\nbe able to mimic them. (Sam Guttenplan writing in his 1994: 595) \nJohn Searle uses the name ‘Church’s thesis’ for a\nstatement that bears very little relation to Church’s thesis\nproperly so called: \nCan the operations of the brain be simulated on a digital computer?\n… The answer seems to me … demonstrably\n‘Yes’ … That is, naturally interpreted, the\nquestion means: Is there some description of the brain such that under\nthat description you could do a computational simulation of the\noperations of the brain. But given Church’s thesis that anything\nthat can be given a precise enough characterization as a set of steps\ncan be simulated on a digital computer, it follows trivially that the\nquestion has an affirmative answer. (Searle 1992: 200) \nThe thesis that Searle mislabels as ‘Church’s\nthesis’ is a version of what I call the simulation thesis: \nSimulation thesis:\n\nAny process that can be given a mathematical description (or that is\nscientifically describable or scientifically explicable) can be\nsimulated by a Turing machine. \nPaul and Patricia Churchland and Philip Johnson-Laird also assert\nversions of the simulation thesis, with a wave towards Church and\nTuring by way of justification:  \nChurch’s Thesis says that whatever is computable is Turing\ncomputable. Assuming, with some safety, that what the mind-brain does\nis computable, then it can in principle be simulated by a computer.\n(Churchland and Churchland 1983: 6)  \nIf you assume that [consciousness] is scientifically explicable\n… [and] [g]ranted that the [Church-Turing] thesis is correct,\nthen the final dichotomy rests on … functionalism. If you\nbelieve [functionalism] to be false … then … you hold\nthat consciousness could be modelled in a computer program in the same\nway that, say, the weather can be modelled … If you accept\nfunctionalism, however, then you should believe that consciousness is\na computational process. (Johnson-Laird 1987: 252) \nAs previously mentioned, Churchland and Churchland say that\nTuring’s  \nresults entail … that a standard digital computer, given only\nthe right program, a large enough memory and sufficient time, can\n… display any systematic pattern of responses to the\nenvironment whatsoever. (1990: 26)  \nChurchland and Churchland certainly do not restrict talk of “systematic\npatterns” to patterns generated by an effective method, and this\nno doubt explains why they think they can assume “with some\nsafety” that what the mind-brain does is computable—since,\non their understanding of matters, this is to assume only that the\nmind-brain exhibits a systematic pattern of responses, or is\ncharacterized by a “rule-governed” input-output function\n(1990: 26). But Turing had no result entailing what the Churchlands\nsay. In fact, he had a result entailing that there are patterns of\nresponses that no standard Turing machine is able to\ngenerate. One example of such a pattern is provided by the function\nh, described earlier. \nIn reality the Church-Turing thesis does not entail that the\nbrain (or the mind, or consciousness) can be modelled by a Turing\nmachine program, not even in conjunction with the belief that the\nbrain (or mind, or consciousness) is scientifically explicable, or\nrule-governed, or scientifically describable, or characterizable as a\nset of steps (Copeland 1998c). The simulation thesis is much stronger\nthan the Church-Turing thesis: as with the maximality thesis, neither\nthe Church-Turing thesis properly so called nor any result proved by\nTuring or Church entails the simulation thesis. \nThis is equally so if the simulation thesis is taken narrowly, as\nconcerning processes that conform to the physics of the real world.\nIf, on the other hand, the thesis is taken as ranging over all\nprocesses, including merely possible or notional processes, then the\nthesis is known to be false, for exactly the same reasons that the\nstronger form of the maximality thesis is false. \nAny device or organ whose internal processes can be described\ncompletely by means of (what Church called) effectively calculable\nfunctions can be simulated exactly by a Turing machine\n(providing that the input into the device or organ is itself\ncomputable by Turing machine). But any device or organ whose\nmathematical description involves functions that are not effectively\ncalculable cannot be so simulated. As Turing showed, there are\nuncountably many such functions. It is an open question whether a\ncompleted neuroscience will need to employ functions that are not\neffectively calculable. \nTuring prefaced his first description of a Turing machine with the\nwords:  \nWe may compare a man in the process of computing a … number to\na machine. (Turing 1936: 59) \nThe Turing machine is a model, idealized in certain respects, of a\nhuman being calculating in accordance with an effective\nmethod. \nWittgenstein put this point in a striking way:  \nTuring’s ‘Machines’. These machines are\nhumans who calculate. (Wittgenstein 1947 [1980]: 1096.) \nIt is a point that Turing was to emphasize, in various forms, again\nand again. For example:  \nA man provided with paper, pencil, and rubber, and subject to strict\ndiscipline, is in effect a universal machine. (Turing 1948: 416) \nIn order to understand Turing’s texts, and the logical claims\ncontained in them, it is essential to keep in mind that when he used\nthe words ‘computer’, ‘computable’ and\n‘computation’, he employed them not in their modern sense\nas pertaining to machines, but as pertaining to human calculators: \nComputers always spend just as long in writing numbers down and\ndeciding what to do next as they do in actual multiplications, and it\nis just the same with ACE [the Automatic Computing Engine] … [T]he ACE will do the work of about\n10,000 computers … Computers will still be employed on small\ncalculations … (Turing 1947: 387, 391) Turing’s\nACE, an early electronic stored-program digital computer, was built at\nthe National Physical Laboratory, London; a pilot version—at the\ntime the fastest functioning computer in the world—first ran in\n1950, and a commercial model, the DEUCE, was marketed very\nsuccessfully by English Electric. \nThe electronic stored-program digital computers for which the\nuniversal Turing machine was a blueprint are, each of them,\ncomputationally equivalent to a Turing machine, and so they too are,\nin a sense, models of human beings engaged in computation. Turing\nchose to emphasise this when explaining these electronic machines in a\nmanner suitable for an audience of uninitiates: \nThe idea behind digital computers may be explained by saying that\nthese machines are intended to carry out any operations which could be\ndone by a human computer. (Turing 1950: 444) \nHe made the point a little more precisely in the technical document\ncontaining his design for the ACE: \nThe class of problems capable of solution by the machine [the ACE] can\nbe defined fairly specifically. They are [a subset of] those problems\nwhich can be solved by human clerical labour, working to fixed rules,\nand without understanding. (Turing 1945: 386) \nTuring went on to characterize this subset in terms of the\namount of paper and time available to the human clerk. \nIt was presumably because he considered the point to be essential for\nunderstanding the nature of the new electronic machines that he chose\nto begin his Programmers’ Handbook for Manchester Electronic\nComputer Mark II with this explanation:  \nElectronic computers are intended to carry out any definite rule of\nthumb process which could have been done by a human operator working\nin a disciplined but unintelligent manner. (Turing c1950:\n1) \nIt was not some deficiency of imagination that led Turing to model his\nL.C.M.s on what could be achieved by a human computer. The\npurpose for which he invented the Turing machine demanded it. The\nEntscheidungsproblem is the problem of finding a humanly\nexecutable method of a certain sort, and, as was explained\nearlier, Turing’s aim was to show that there is no such method\nin the case of the full first-order predicate calculus. \nIt is also important to note that, when Turing uses the word\n‘machine’, he often means not machine-in-general but, as\nwe would now say, Turing machine. At one point he explicitly draws\nattention to this usage: \nThe expression ‘machine process’ of course means one which\ncould be carried out by the type of machine I was considering [in\n“On Computable Numbers”]. (Turing 1947: 378–9) \nThus when, a few pages later, Turing asserts that “machine\nprocesses and rule of thumb processes are synonymous” (1947:\n383), he is to be understood as advancing the Church-Turing thesis\n(and its converse), not a version of the maximality thesis. Unless his\nintended usage is borne in mind, misunderstanding is likely to ensue.\nEspecially liable to mislead are statements like the following, which\na casual reader might easily mistake for a formulation of the\nmaximality thesis:  \nThe importance of the universal machine is clear. We do not need to\nhave an infinity of different machines doing different jobs. A single\none will suffice. The engineering problem of producing various\nmachines for various jobs is replaced by the office work of\n‘programming’ the universal machine to do these jobs.\n(Turing 1948: 414) \nIn context it is perfectly clear that these remarks concern machines\nequivalent to Turing machines; the passage is embedded in a discussion\nof L.C.M.s. \nWhether or not Turing would, if queried, have assented to the\nmaximality thesis is unknown. There is certainly no textual evidence\nin favour of the common belief that he did so assent.","contact.mail":"jack.copeland@canterbury.ac.nz","contact.domain":"canterbury.ac.nz"}]
