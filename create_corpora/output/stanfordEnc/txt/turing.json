[{"date.published":"2002-06-03","date.changed":"2013-09-30","url":"https://plato.stanford.edu/entries/turing/","author1":"Andrew Hodges","author1.info":"https://www.maths.ox.ac.uk/people/profiles/andrew.hodges","entry":"turing","body.text":"\n\n\n\nAlan Turing (1912–1954) never described himself as a philosopher, but\nhis 1950 paper “Computing Machinery and Intelligence” is one of the\nmost frequently cited in modern philosophical literature. It gave a\nfresh approach to the traditional mind-body problem, by relating it to\nthe mathematical concept of computability he himself had introduced in\nhis 1936–7 paper “On computable numbers, with an application to the\nEntscheidungsproblem.” His work can be regarded as the foundation of\ncomputer science and of the artificial intelligence program.\n\n\n\nAlan Turing's short and extraordinary life has attracted wide interest.\nIt has inspired his mother's memoir (E. S. Turing 1959), a detailed\nbiography (Hodges 1983), a play and television film (Whitemore 1986),\nand various other works of fiction and art.  \n\nThere are many reasons for this interest, but one is that in every\nsphere of his life and work he made unexpected connections between\napparently unrelated areas. His central contribution to science and\nphilosophy came through his treating the subject of symbolic logic as a\nnew branch of applied mathematics, giving it a physical and engineering\ncontent. Unwilling or unable to remain within any standard role or\ndepartment of thought, Alan Turing continued a life full of\nincongruity. Though a shy, boyish, man, he had a pivotal role in world\nhistory through his role in Second World War cryptology. Though the\nfounder of the dominant technology of the twentieth century, he\nvariously impressed, charmed or disturbed people with his unworldly\ninnocence and his dislike of moral or intellectual compromise. \n\nAlan Mathison Turing was born in London, 23 June 1912, to\nupper-middle-class British parents. His schooling was of a traditional\nkind, dominated by the British imperial system, but from earliest life\nhis fascination with the scientific impulse—expressed by him as\nfinding the ‘commonest in nature’—found him at odds\nwith authority. His scepticism, and disrespect for worldly values, were\nnever tamed and became ever more confidently eccentric. His moody\nhumour swung between gloom and vivacity. His life was also notable as\nthat of a gay man with strong emotions and a growing insistence on his\nidentity. \n\nHis first true home was at King's College, Cambridge University,\nnoted for its progressive intellectual life centred on J. M. Keynes.\nTuring studied mathematics with increasing distinction and was elected\na Fellow of the college in 1935. This appointment was followed by a\nremarkable and sudden début in an area where he was an unknown\nfigure: that of mathematical logic. The paper “On Computable\nNumbers…” (Turing 1936–7) was his first and perhaps greatest\ntriumph. It gave a definition of computation and an absolute limitation\non what computation could achieve, which makes it the founding work of\nmodern computer science. It led him to Princeton for more advanced work\nin logic and other branches of mathematics. He had the opportunity to\nremain in the United States, but chose to return to Britain in 1938,\nand was immediately recruited for the British communications war. \n\nFrom 1939 to 1945 Turing was almost totally engaged in the mastery\nof the German enciphering machine, Enigma, and other cryptological\ninvestigations at now-famous Bletchley Park, the British government's\nwartime communications headquarters. Turing made a unique logical\ncontribution to the decryption of the Enigma and became the chief\nscientific figure, with a particular responsibility for reading the\nU-boat communications. As such he became a top-level figure in\nAnglo-American liaison, and also gained exposure to the most advanced\nelectronic technology of the day. \n\nCombining his ideas from mathematical logic, his experience in\ncryptology, and some practical electronic knowledge, his ambition, at\nthe end of the war in Europe, was to create an electronic computer in\nthe full modern sense. His plans, commissioned by the National Physical\nLaboratory, London, were overshadowed by the more powerfully supported\nAmerican projects. Turing also laboured under the disadvantage that his\nwartime achievements remained totally secret. His ideas led the field\nin 1946, but this was little recognised. Frustrated in his work, he\nemerged as a powerful marathon runner, and almost qualified for the\nBritish team in the 1948 Olympic games. \n\nTuring's motivations were scientific rather than industrial or\ncommercial, and he soon returned to the theoretical limitations of\ncomputation, this time focussing on the comparison of the power of\ncomputation and the power of the human brain. His contention was that\nthe computer, when properly programmed, could rival the brain. It\nfounded the ‘Artificial Intelligence’ program of coming\ndecades. \n\nIn 1948 he moved to Manchester University, where he partly fulfilled\nthe expectations placed upon him to plan software for the pioneer\ncomputer development there, but still remained a free-ranging thinker.\nIt was here that his famous 1950 paper, “Computing Machinery and\nIntelligence,” (Turing 1950b) was written. In 1951 he was elected a\nFellow of the Royal Society for his 1936 achievement, yet at the same\ntime he was striking into entirely new territory with a mathematical\ntheory of biological morphogenesis (Turing 1952). \n\nThis work was interrupted by Alan Turing's arrest in February 1952\nfor his sexual affair with a young Manchester man, and he was obliged,\nto escape imprisonment, to undergo the injection of oestrogen intended\nto negate his sexual drive. He was disqualified from continuing secret\ncryptological work. His general libertarian attitude was enhanced\nrather than suppressed by the criminal trial, and his intellectual\nindividuality also remained as lively as ever. While remaining formally\na Reader in the Theory of Computing, he not only embarked on more\nambitious applications of his biological theory, but advanced new ideas\nfor fundamental physics. \n\nFor this reason his death, on 7 June 1954, at his home in Wilmslow,\nCheshire, came as a general surprise. In hindsight it is obvious that\nTuring's unique status in Anglo-American secret communication work\nmeant that there were pressures on him of which his contemporaries were\nunaware; there was certainly another ‘security’ conflict\nwith government in 1953 (Hodges 1983, p. 483). Some commentators, e.g.\nDawson (1985), have argued that assassination should not be ruled out.\nBut he had spoken of suicide, and his death, which was by cyanide\npoisoning, was most likely by his own hand, contrived so as to allow\nthose who wished to do so to believe it a result of his penchant for\nchemistry experiments. The symbolism of its dramatic element—a\npartly eaten apple—has continued to haunt the intellectual Eden\nfrom which Alan Turing was expelled. \n\nAlan Turing drew much between 1928 and 1933 from the work of the\nmathematical physicist and populariser A. S. Eddington, from J. von\nNeumann's account of the foundations of quantum mechanics, and then\nfrom Bertrand Russell's mathematical logic. Meanwhile, his lasting\nfascination with the problems of mind and matter was heightened by\nemotional elements in his own life (Hodges 1983, p. 63). In 1934 he\ngraduated with an outstanding degree in mathematics from Cambridge\nUniversity, followed by a successful dissertation in probability theory\nwhich won him a Fellowship of King's College, Cambridge, in 1935. This\nwas the background to his learning, also in 1935, of the problem which\nwas to make his name.  \n\nIt was from the lectures of the topologist M. H. A. (Max) Newman in\nthat year that he learnt of Gödel's 1931 proof of the formal\nincompleteness of logical systems rich enough to include arithmetic,\nand of the outstanding problem in the foundations of mathematics as\nposed by Hilbert: the “Entscheidungsproblem” (decision problem). Was\nthere a method by which it could be decided, for any given mathematical\nproposition, whether or not it was provable? \n\nThe principal difficulty of this question lay in giving an\nunassailably correct and general definition of what was meant by such\nexpressions as ‘definite method’ or ‘effective\nprocedure.’ Turing worked on this alone for a year until April\n1936; independence and isolation was to be both his strength, in\nformulating original ideas, and his weakness, when it came to promoting\nand implementing them. \n\nThe word ‘mechanical’ had often been used of the\nformalist approach lying behind Hilbert's problem, and Turing seized on\nthe concept of the machine.Turing's solution lay in defining\nwhat was soon to be named the Turing machine. With this he\ndefined the concept of ‘the mechanical’ in terms of simple\natomic operations. The Turing machine formalism was modelled on the\nteleprinter, slightly enlarged in scope to allow a paper tape that\ncould move in both directions and a ‘head’ that could read,\nerase and print new symbols, rather than only read and punch permanent\nholes. \n\nThe Turing machine is ‘theoretical,’ in the sense that\nit is not intended actually to be engineered (there being no point in\ndoing so), although it is essential that its atomic components (the\npaper tape, movement to left and right, testing for the presence of a\nsymbol) are such as could actually be implemented. The whole\npoint of the formalism is to reduce the concept of ‘method’\nto simple operations that can unquestionably be\n‘effected.’ \n\nNevertheless Turing's purpose was to embody the most general\nmechanical process as carried out by a human being. His\nanalysis began not with any existing computing machines, but with the\npicture of a child's exercise book marked off in squares. From the\nbeginning, the Turing machine concept aimed to capture what the\nhuman mind can do when carrying out a procedure. \n\nIn speaking of ‘the’ Turing machine it should be made\nclear that there are infinitely many Turing machines, each\ncorresponding to a different method or procedure, by virtue of having a\ndifferent ‘table of behaviour.’ Nowadays it is almost\nimpossible to avoid imagery which did not exist in 1936: that of the\ncomputer. In modern terms, the ‘table of behaviour’ of a\nTuring machine is equivalent to a computer program. \n\nIf a Turing machine corresponds to a computer program, what is the\nanalogy of the computer? It is what Turing described as a\nuniversal machine (Turing 1936, p. 241). Again, there are\ninfinitely many universal Turing machines, forming a subset of\nTuring machines; they are those machines with ‘tables of\nbehaviour’ complex enough to read the tables of other Turing\nmachines, and then do what those machines would have done. If this\nseems strange, note the modern parallel that any computer can be\nsimulated by software on another computer. The way that tables can read\nand simulate the effect of other tables is crucial to Turing's theory,\ngoing far beyond Babbage's ideas of a hundred years earlier. It also\nshows why Turing's ideas go to the heart of the modern computer, in\nwhich it is essential that programs are themselves a form of data which\ncan be manipulated by other programs. But the reader must always\nremember that in 1936 there were no such computers; indeed the modern\ncomputer arose out of the formulation of ‘behaving\nmechanically’ that Turing found in this work. \n\nTuring's machine formulation allowed the precise definition of the\ncomputable: namely, as what can be done by a Turing machine\nacting alone. More exactly, computable operations are those which can\nbe effected by what Turing called automatic machines. The\ncrucial point here is that the action of an automatic Turing machine is\ntotally determined by its ‘table of behaviour’. (Turing\nalso allowed for ‘choice machines’ which call for human\ninputs, rather than being totally determined.) Turing then proposed\nthat this definition of ‘computable’ captured precisely\nwhat was intended by such words as ‘definite method, procedure,\nmechanical process’ in stating the\nEntscheidungsproblem. \n\nIn applying his machine concept to the\nEntscheidungsproblem, Turing took the step of defining\ncomputable numbers. These are those real numbers, considered\nas infinite decimals, say, which it is possible for a Turing machine,\nstarting with an empty tape, to print out. For example, the Turing\nmachine which simply prints the digit 1 and moves to the right, then\nrepeats that action for ever, can thereby compute the number\n.1111111… A more complicated Turing machine can compute the\ninfinite decimal expansion of π. \n\nTuring machines, like computer programs, are countable; indeed they\ncan be ordered in a complete list by a kind of alphabetical ordering of\ntheir ‘tables of behaviour’. Turing did this by encoding\nthe tables into ‘description numbers’ which can then be\nordered in magnitude. Amongst this list, a subset of them (those with\n‘satisfactory’ description numbers) are the machines which\nhave the effect of printing out infinite decimals. It is readily shown,\nusing a ‘diagonal’ argument first used by Cantor and\nfamiliar from the discoveries of Russell and Gödel, that there can\nbe no Turing machine with the property of deciding whether a\ndescription number is satisfactory or not. The argument can be\npresented as follows. Suppose that such a Turing machine exists. Then\nit is possible to construct a new Turing machine which works out in\nturn the Nth digit from the Nth machine possessing a satisfactory\ndescription number. This new machine then prints an Nth digit differing\nfrom that digit. As the machine proceeds, it prints out an infinite\ndecimal, and therefore has a ‘satisfactory’ description\nnumber. Yet this number must by construction differ from the outputs of\nevery Turing machine with a satisfactory description number. This is a\ncontradiction, so the hypothesis must be false (Turing 1936, p. 246).\nFrom this, Turing was able to answer Hilbert's\nEntscheidungsproblem in the negative: there can be no such\ngeneral method. \n\nTuring's proof can be recast in many ways, but the core idea depends\non the self-reference involved in a machine operating on\nsymbols, which is itself described by symbols and so can operate on its\nown description. Indeed, the self-referential aspect of the theory can\nbe highlighted by a different form of the proof, which Turing preferred\n(Turing 1936, p. 247). Suppose that such a machine for deciding\nsatisfactoriness does exist; then apply it to its own description\nnumber. A contradiction can readily be obtained. However, the\n‘diagonal’ method has the advantage of bringing out the\nfollowing: that a real number may be defined unambiguously,\nyet be uncomputable. It is a non-trivial discovery that\nwhereas some infinite decimals (e.g. π) may be encapsulated in a\nfinite table, other infinite decimals (in fact, almost all) cannot.\nLikewise there are decision problems such as ‘is this number\nprime?’ in which infinitely many answers are wrapped up in a\nfinite recipe, while there are others (again, almost all) which are\nnot, and must be regarded as requiring infinitely many different\nmethods. ‘Is this a provable proposition?’ belongs to the\nlatter category. \n\nThis is what Turing established, and into the bargain the remarkable\nfact that anything that is computable can in fact be computed\nby one machine, a universal Turing machine. \n\nIt was vital to Turing's work that he justified the definition by\nshowing that it encompassed the most general idea of\n‘method’. For if it did not, the\nEntscheidungproblem remained open: there might be some more\npowerful type of method than was encompassed by Turing computability.\nOne justification lay in showing that the definition included many\nprocesses a mathematician would consider to be natural in computation\n(Turing 1936, p. 254). Another argument involved a human calculator\nfollowing written instruction notes. (Turing 1936, p. 253). But in a\nbolder argument, the one he placed first, he considered an\n‘intuitive’ argument appealing to the states of\nmind of a human computer. (Turing 1936, p. 249). The entry of\n‘mind’ into his argument was highly significant, but at\nthis stage it was only a mind following a rule. \n\nTo summarise: Turing found, and justified on very general and\nfar-reaching grounds, a precise mathematical formulation of the\nconception of a general process or method. His work, as presented to\nNewman in April 1936, argued that his formulation of\n‘computability’ encompassed ‘the possible processes\nwhich can be carried out in computing a number.’ (Turing 1936,\np. 232). This opened up new fields of discovery both in practical\ncomputation, and in the discussion of human mental processes. However,\nalthough Turing had worked as what Newman called ‘a confirmed\nsolitary’ (Hodges 1983, p 113), he soon learned that he was not\nalone in what Gandy (1988) has called ‘the confluence of ideas in\n1936.’ \n\nThe Princeton logician Alonzo Church had slightly outpaced Turing in\nfinding a satisfactory definition of what he called ‘effective\ncalculability.’ Church's definition required the logical\nformalism of the lambda-calculus. This meant that from the\noutset Turing's achievement merged with and superseded the formulation\nof Church's Thesis, namely the assertion that the\nlambda-calculus formalism correctly embodied the concept of effective\nprocess or method. Very rapidly it was shown that the mathematical\nscope of Turing computability coincided with Church's definition (and\nalso with the scope of the general recursive functions defined\nby Gödel). Turing wrote his own statement (Turing 1939, p. 166) of\nthe conclusions that had been reached in 1938; it is in the Ph.D.\nthesis that he wrote under Church's supervision, and so this statement\nis the nearest we have to a joint statement of the ‘Church-Turing\nthesis’: \n\nChurch accepted that Turing's definition gave a compelling, intuitive\nreason for why Church's thesis was true. The recent exposition by\nDavis (2000) emphasises that Gödel also was convinced by Turing's\nargument that an absolute concept had been identified (Gödel\n1946). The situation has not changed since 1937.  (For further\ncomment, see the article on the\n Church-Turing Thesis. \nThe recent selection of Turing's papers edited by Copeland (2004),\nand the review of Hodges (2006), continue this discussion.) \n\nTuring himself did little to evangelise his formulation in the world\nof mathematical logic and early computer science. The textbooks of\nDavis (1958) and Minsky (1967) did more. Nowadays Turing computability\nis often reformulated (e.g. in terms of ‘register\nmachines’). However, computer simulations (e.g.,\n Turing's World,\n from Stanford) have brought Turing's\noriginal imagery to life. \n\nTuring's work also opened new areas for decidability questions\nwithin pure mathematics. From the 1970s, Turing machines also took on\nnew life in the development of complexity theory, and as such\nunderpin one of the most important research areas in computer science.\nThis development exemplifies the lasting value of Turing's special\nquality of giving concrete illustration to abstract concepts. \n\nAs put by Gandy (1988), Turing's paper was ‘a paradigm of\nphilosophical analysis,’ refining a vague notion into a precise\ndefinition. But it was more than being an analysis within the\nworld of mathematical logic: in Turing's thought the question that\nconstantly recurs both theoretically and practically is the\nrelationship of the logical Turing machine to the physical world.  \n\n‘Effective’ means doing, not merely imagining\nor postulating. At this stage neither Turing nor any other logician\nmade a serious investigation into the physics of such\n‘doing.’ But Turing's image of a teleprinter-like machine\ndoes inescapably refer to something that could actually be physically\n‘done.’ His concept is a distillation of the idea that one\ncan only ‘do’ one simple action, or finite number of simple\nactions, at a time. How ‘physical’ a concept is it? \n\nThe tape never holds more than a finite number of marked squares at\nany point in a computation. Thus it can be thought of as being finite,\nbut always capable of further extension as required. Obviously this\nunbounded extendibility is unphysical, but the definition is still of\npractical use: it means that anything done on a finite tape, however\nlarge, is computable. (Turing himself took such a finitistic approach\nwhen explaining the practical relevance of computability in his 1950\npaper.) One aspect of Turing's formulation, however, involves absolute\nfiniteness: the table of behaviour of a Turing machine must be finite,\nsince Turing allows only a finite number of\n‘configurations’ of a Turing machine, and only a finite\nrepertoire of symbols which can be marked on the tape. This is\nessentially equivalent to allowing only computer programs with finite\nlengths of code. \n\n‘Calculable by finite means’ was Turing's\ncharacterisation of computability, which he justified with the argument\nthat ‘the human memory is necessarily limited.’ (Turing\n1936, p. 231). The whole point of his definition lies in encoding\ninfinite potential effects, (e.g. the printing of an infinite decimal)\ninto finite ‘tables of behaviour’. There would be no point\nin allowing machines with infinite ‘tables of behaviour’.\nIt is obvious, for instance, that any real number could be printed by\nsuch a ‘machine’, by letting the Nth configuration be\n‘programmed’ to print the Nth digit, for example. Such a\n‘machine’ could likewise store any countable number of\nstatements about all possible mathematical expressions, and so make the\nEntscheidungsproblem trivial. \n\nChurch (1937), when reviewing Turing's paper while Turing was in\nPrinceton under his supervision, actually gave a bolder\ncharacterisation of the Turing machine as an arbitrary finite\nmachine. \n\nChurch (1940) repeated this characterisation. Turing neither\nendorsed it nor said anything to contradict it, leaving the general\nconcept of ‘machine’ itself undefined. The work of Gandy\n(1980) did more to justify this characterisation, by refining the\nstatement of what is meant by ‘a machine.’ His results\nsupport Church's statement; they also argue strongly for the view that\nnatural attempts to extend the notion of computability lead to\ntrivialisation: if Gandy's conditions on a ‘machine’ are\nsignificantly weakened then every real number becomes calculable (Gandy\n1980, p. 130ff.). (For a different interpretation of Church's\nstatement, see the article on the\n Church-Turing Thesis.) \n\nTuring did not explicitly discuss the question of the speed\nof his elementary actions. It is left implicit in his discussion, by\nhis use of the word ‘never,’ that it is not possible for\ninfinitely many steps to be performed in a finite time. Others have\nexplored the effect of abandoning this restriction. Davies (2001), for\ninstance, describes a ‘machine’ with an infinite number of\nparts, requiring components of arbitrarily small size, running at\narbitrarily high speeds. Such a ‘machine’ could perform\nuncomputable tasks. Davies emphasises that such a machine cannot be\nbuilt in our own physical world, but argues that it could be\nconstructed in a universe with different physics. To the extent that it\nrules out such ‘machines’, the Church-Turing thesis must\nhave at least some physical content. \n\nTrue physics is quantum-mechanical, and this implies a different\nidea of matter and action from Turing's purely classical picture. It is\nperhaps odd that Turing did not point this out in this period, since he\nwas well versed in quantum physics. Instead, the analysis and practical\ndevelopment of quantum computing was left to the 1980s. Quantum\ncomputation, using the evolution of wave-functions rather than\nclassical machine states, is the most important way in which Turing\nmachine model has been challenged. The standard formulation of quantum\ncomputing (Deutsch 1985, following Feynman 1982) does not predict\nanything beyond computable effects, although within the realm of the\ncomputable, quantum computations may be very much more efficient than\nclassical computations. It is possible that a deeper understanding of\nquantum mechanical physics may further change the picture of what can\nbe physically ‘done.’ \n\nTuring turned to the exploration of the uncomputable for his\nPrinceton Ph.D. thesis (1938), which then appeared as Systems of\nLogic based on Ordinals (Turing 1939).  \n\nIt is generally the view, as expressed by Feferman (1988), that this\nwork was a diversion from the main thrust of his work. But from another\nangle, as expressed in (Hodges 1997), one can see Turing's development\nas turning naturally from considering the mind when following a rule,\nto the action of the mind when not following a rule. In\nparticular this 1938 work considered the mind when seeing the truth of\none of Gödel's true but formally unprovable propositions, and\nhence going beyond rules based on the axioms of the system. As Turing\nexpressed it (Turing 1939, p. 198), there are ‘formulae, seen\nintuitively to be correct, but which the Gödel theorem shows are\nunprovable in the original system.’ Turing's theory of\n‘ordinal logics’ was an attempt to ‘avoid as far as\npossible the effects of Gödel's theorem’ by studying the\neffect of adding Gödel sentences as new axioms to create stronger\nand stronger logics. It did not reach a definitive conclusion. \n\nIn his investigation, Turing introduced the idea of an\n‘oracle’ capable of performing, as if by magic, an\nuncomputable operation. Turing's oracle cannot be considered as some\n‘black box’ component of a new class of machines, to be put\non a par with the primitive operations of reading single symbols, as\nhas been suggested by (Copeland 1998). An oracle is infinitely more\npowerful than anything a modern computer can do, and nothing like\nan elementary component of a computer. Turing defined\n‘oracle-machines’ as Turing machines with an additional\nconfiguration in which they ‘call the oracle’ so as to take\nan uncomputable step. But these oracle-machines are not purely\nmechanical. They are only partially mechanical, like Turing's\nchoice-machines. Indeed the whole point of the oracle-machine\nis to explore the realm of what cannot be done by purely\nmechanical processes. Turing emphasised (Turing 1939, p. 173): \n\nTuring's oracle can be seen simply as a mathematical tool, useful\nfor exploring the mathematics of the uncomputable. The idea of an\noracle allows the formulation of questions of relative rather\nthan absolute computability. Thus Turing opened new fields of\ninvestigation in mathematical logic. However, there is also a possible\ninterpretation in terms of human cognitive capacity. On this\ninterpretation, the oracle is related to the ‘intuition’\ninvolved in seeing the truth of a Gödel statement. M. H. A.\nNewman, who introduced Turing to mathematical logic and continued to\ncollaborate with him, wrote in (Newman 1955) that the oracle resembles\na mathematician ‘having an idea’, as opposed to using a\nmechanical method. However, Turing's oracle cannot actually be\nidentified with a human mental faculty. It is too powerful: it\nimmediately supplies the answer as to whether any given Turing machine\nis ‘satisfactory,’ something no human being could do. On\nthe other hand, anyone hoping to see mental ‘intuition’\ncaptured completely by an oracle, must face the difficulty that Turing\nshowed how his argument for the incompleteness of Turing machines could\nbe applied with equal force to oracle-machines (Turing 1939, p. 173).\nThis point has been emphasised by Penrose (1994, p. 380). Newman's\ncomment might better be taken to refer to the different oracle\nsuggested later on (Turing 1939, p. 200), which has the property of\nrecognising ‘ordinal formulae.’ One can only safely say\nthat Turing's interest at this time in uncomputable operations appears\nin the general setting of studying the mental\n‘intuition’ of truths which are not established by\nfollowing mechanical processes (Turing 1939, p. 214ff.). \n\nIn Turing's presentation, intuition is in practice present in every\npart of a mathematician's thought, but when mathematical proof is\nformalised, intuition has an explicit manifestation in those steps\nwhere the mathematician sees the truth of a formally unprovable\nstatement. Turing did not offer any suggestion as to what he considered\nthe brain was physically doing in a moment of such\n‘intuition’; indeed the word ‘brain’ did not\nappear in his writing in this era. This question is of interest because\nof the views of Penrose (1989, 1990, 1994, 1996) on just this issue:\nPenrose holds that the ability of the mind to see formally unprovable\ntruths shows that there must be uncomputable physical operations in the\nbrain. It should be noted that there is widespread disagreement about\nwhether the human mind is really seeing the truth of a Gödel\nsentence; see for instance the discussion in (Penrose 1990) and the\nreviews following it. However Turing's writing at this period accepted\nwithout criticism the concept of intuitive recognition of the\ntruth. \n\nIt was also at this period that Turing met Wittgenstein, and there\nis a full record of their 1939 discussions on the foundations of\nmathematics in (Diamond 1976). To the disappointment of many, there is\nno record of any discussions between them, verbal or written, on the\nproblem of Mind. \n\nIn 1939 Turing's various energetic investigations were broken off\nfor war work. This did, however, have the positive feature of leading\nTuring to turn his universal machine into the practical form of the\nmodern digital computer. \n\nWhen apprised in 1936 of Turing's idea for a universal machine,\nTuring's contemporary and friend, the economist David Champernowne,\nreacted by saying that such a thing was impractical; it would need\n‘the Albert Hall.’ If built from relays as then employed in\ntelephone exchanges, that might indeed have been so, and Turing made no\nattempt at it. However, in 1937 Turing did work with relays on a\nsmaller machine with a special cryptological function (Hodges 1983, p.\n138). World history then led Turing to his unique role in the Enigma\nproblem, to his becoming the chief figure in the mechanisation of\nlogical procedures, and to his being introduced to ever faster and more\nambitious technology as the war continued.  \n\nAfter 1942, Turing learnt that electronic components offered the\nspeed, storage capacity and logical functions required to be effective\nas ‘tapes’ and instruction tables. So from 1945, Turing\ntried to use electronics to turn his universal machine into practical\nreality. Turing rapidly composed a detailed plan for a modern\nstored-program computer: that is, a computer in which data and\ninstructions are stored and manipulated alike. Turing's ideas led the\nfield, although his report of 1946 postdated von Neumann's more famous\nEDVAC report (von Neumann 1945). It can however be argued, as does\nDavis (2000), that von Neumann gained his fundamental insight into the\ncomputer through his pre-war familiarity with Turing's logical work. At\nthe time, however, these basic principles were not much discussed. The\ndifficulty of engineering the electronic hardware dominated\neverything. \n\nIt therefore escaped observers that Turing was ahead of von Neumann\nand everyone else on the future of software, or as he called it, the\n‘construction of instruction tables.’ Turing (1946) foresaw\nat once: \n\nThe process of constructing instruction tables should be very\nfascinating. There need be no real danger of it ever becoming a drudge,\nfor any processes that are quite mechanical may be turned over to the\nmachine itself. \n\nThese remarks, reflecting the universality of the computer, and its\nability to manipulate its own instructions, correctly described the\nfuture trajectory of the computer industry. However, Turing had in mind\nsomething greater: ‘building a brain.’  \n\nThe provocative words ‘building a brain’ from the outset\nannounced the relationship of Turing's technical computer engineering\nto a philosophy of Mind. Even in 1936, Turing had given an\ninterpretation of computability in terms of ‘states of\nmind’. His war work had shown the astounding power of the\ncomputable in mechanising expert human procedures and judgments. From\n1941 onwards, Turing had also discussed the mechanisation of\nchess-playing and other ‘intelligent’ activities with his\ncolleagues at Bletchley Park (Hodges 1983, p. 213). But more\nprofoundly, it appears that Turing emerged in 1945 with a conviction\nthat computable operations were sufficient to embrace all\nmental functions performed by the brain. As will become clear from the\nensuing discussion, the uncomputable ‘intuition’ of 1938\ndisappeared from Turing's thought, and was replaced by new ideas all\nlying within the realm of the computable. This change shows even in the\ntechnical prospectus of (Turing 1946), where Turing referred to the\npossibility of making a machine calculate chess moves, and then\ncontinued:  \n\nThe puzzling reference to ‘mistakes’ is made clear by a\ntalk Turing gave a year later (Turing 1947), in which the issue of\nmistakes is linked to the issue of the significance of seeing the truth\nof formally unprovable statements. \n\nTuring's post-war view was that mathematicians make mistakes, and so\ndo not in fact see the truth infallibly. Once the possibility of\nmistakes is admitted, Gödel's theorem become irrelevant.\nMathematicians and computers alike apply computable processes to the\nproblem of judging the correctness of assertions; both will therefore\nsometimes err, since seeing the truth is known not to be a computable\noperation, but there is no reason why the computer need do worse than\nthe mathematician. This argument is still very much alive. For\ninstance, Davis (2000) endorses Turing's view and attacks Penrose\n(1989, 1990, 1994, 1996) who argues against the significance of human\nerror on the grounds of a Platonist account of mathematics. \n\nTuring also pursued more constructively the question of how\ncomputers could be made to perform operations which did not appear to\nbe ‘mechanical’ (to use common parlance). His guiding\nprinciple was that it should be possible to simulate the operation of\nhuman brains. In an unpublished report (Turing 1948), Turing explained\nthat the question was that of how to simulate ‘initiative’\nin addition to ‘discipline’—comparable to the need\nfor ‘intuition’ as well as mechanical ingenuity expressed\nin his pre-war work. He announced ideas for how to achieve this: he\nthought ‘initiative’ could arise from systems where the\nalgorithm applied is not consciously designed, but is arrived at by\nsome other means. Thus, he now seemed to think that the mind when\nnot actually following any conscious rule or plan, was\nnevertheless carrying out some computable process. \n\nHe suggested a range of ideas for systems which could be said to\nmodify their own programs. These ideas included nets of logical\ncomponents (‘unorganised machines’) whose properties could\nbe ‘trained’ into a desired function. Thus, as expressed\nby (Ince 1989), he predicted neural networks. However, Turing's nets\ndid not have the ‘layered’ structure of the neural\nnetworks that were to be developed from the 1950s onwards. By the\nexpression ‘genetical or evolutionary search’, he also\nanticipated the ‘genetic algorithms’ which since the late\n1980s have been developed as a less closely structured approach to\nself-modifying programs. Turing's proposals were not well developed in\n1948, and at a time when electronic computers were only barely in\noperation, could not have been. Copeland and Proudfoot (1996) have\ndrawn fresh attention to Turing’s connectionist ideas, which\nhave since been tried out (Teuscher 2001). \n\nIt is important to note that Turing identified his prototype neural\nnetworks and genetic algorithms as computable. This has to be\nemphasised since the word ‘nonalgorithmic’ is often now\nconfusingly employed for computer operations that are not explicitly\nplanned. Indeed, his ambition was explicit: he himself wanted to\nimplement them as programs on a computer. Using the term Universal\nPractical Computing Machine for what is now called a digital computer,\nhe wrote in (Turing 1948): \n\nThe upshot of this line of thought is that all mental operations are\ncomputable and hence realisable on a universal machine: the\ncomputer. Turing advanced this view with increasing confidence in the\nlate 1940s, perfectly aware that it represented what he enjoyed calling\n‘heresy’ to the believers in minds or souls beyond material\ndescription. \n\nTuring was not a mechanical thinker, or a stickler for convention;\nfar from it. Of all people, he knew the nature of originality and\nindividual independence. Even in tackling the U-boat Enigma problem,\nfor instance, he declared that he did so because no-one else was\nlooking at it and he could have it to himself. Far from being trained\nor organised into this problem, he took it on despite the prevailing\nwisdom in 1939 that it was too difficult to attempt. His arrival at a\nthesis of ‘machine intelligence’ was not the outcome of\nsome dull or restricted mentality, or a lack of appreciation of\nindividual human creativity. \n\nTuring relished the paradox of ‘Machine Intelligence’: an\napparent contradiction in terms. It is likely that he was already\nsavouring this theme in 1941, when he read a theological book by the\nauthor Dorothy Sayers (Sayers 1941). In (Turing 1948) he quoted from\nthis work to illustrate his full awareness that in common parlance\n‘mechanical’ was used to to mean ‘devoid of\nintelligence.’ Giving a date which no doubt had his highly\nsophisticated Enigma-breaking machines secretly in mind, he wrote that\n‘up to 1940’ only very limited machinery had been used, and\nthis ‘encouraged the belief that machinery was necessarily\nlimited to extremely straightforward, possibly even to repetitious,\njobs.’ His object was to dispel these connotations.  \n\nIn 1950, Turing wrote on the first page of his Manual for users of\nthe Manchester University computer (Turing 1950a): \n\nThis is, of course, just the 1936 universal Turing machine, now in\nelectronic form. On the other hand, he also wrote in the more famous\npaper of that year (Turing 1950b, p. 460) \n\nHow could the intelligent arise from operations which were\nthemselves totally routine and \nmindless—‘entirely without intelligence’? This is the core of the\nproblem Turing faced, and the same problem faces Artificial\nIntelligence research today. Turing's underlying argument was that the\nhuman brain must somehow be organised for intelligence, and that the\norganisation of the brain must be realisable as a finite discrete-state\nmachine. The implications of this view were exposed to a wider circle\nin his famous paper, “Computing Machinery and Intelligence,” which\nappeared in Mind in October 1950. \n\nThe appearance of this paper, Turing's first foray into a journal of\nphilosophy, was stimulated by his discussions at Manchester University\nwith Michael Polanyi. It also reflects the general sympathy of Gilbert\nRyle, editor of Mind, with Turing's point of view. \n\nTuring's 1950 paper was intended for a wide readership, and its fresh and\ndirect approach has made it one of the most frequently cited and republished\npapers in modern philosophical literature. Not surprisingly,\nthe paper has attracted many critiques. Not all commentators note the\ncareful explication of computability which opens the paper, with an\nemphasis on the concept of the universal machine. This explains why if\nmental function can be achieved by any finite discrete state machine,\nthen the same effect can be achieved by programming a computer (Turing\n1950b, p. 442). (Note, however, that Turing makes no claim that the\nnervous system should resemble a digital computer in its structure.)\nTuring's treatment has a severely finitistic flavour: his argument is\nthat the relevant action of the brain is not only computable, but\nrealisable as a totally finite machine, i.e. as a Turing machine that\ndoes not use any ‘tape’ at all. In his account, the full\nrange of computable functions, defined in terms of Turing machines that\nuse an infinite tape, only appears as being of ‘special\ntheoretical interest.’ (Of uncomputable functions there is, a\nfortiori, no mention.) Turing uses the finiteness of the nervous\nsystem to give an estimate of about 109 bits\nof storage required for a limited simulation of intelligence (Turing\n1950b, p. 455). \n\nThe wit and drama of Turing's ‘imitation game’ has\nattracted more fame than his careful groundwork. Turing's argument was\ndesigned to bypass discussions of the nature of thought, mind, and\nconsciousness, and to give a criterion in terms of external observation\nalone. His justification for this was that one only judges that other\nhuman beings are thinking by external observation, and he applied a\nprinciple of ‘fair play for machines’ to argue that the\nsame should hold for machine intelligence. He dramatised this viewpoint\nby a thought-experiment (which nowadays can readily be tried out). A\nhuman being and a programmed computer compete to convince an impartial\njudge, using textual messages alone, as to which is the human being.\nIf the computer wins, it must be credited with intelligence. \n\nTuring introduced his ‘game’ confusingly with a poor\nanalogy: a party game in which a man pretends to be a woman. His loose\nwording (Turing 1950b, p. 434) has led some writers wrongly to suppose\nthat Turing proposed an ‘imitation game’ in which a machine\nhas to imitate a man imitating a woman. Others, like Lassègue\n(1998), place much weight on this game of gender pretence and its real\nor imaginary connotations. In fact, the whole point of the\n‘test’ setting, with its remote text-message link, was to\nseparate intelligence from other human faculties and\nproperties. But it may fairly be said that this confusion reflects\nTuring's richly ambitious concept of what is involved in human\n‘intelligence’. It might also be said to illustrate his own\nhuman intelligence, in particular a delight in the Wildean reversal of\nroles, perhaps reflecting, as in Wilde, his homosexual identity. His\nfriends knew an Alan Turing in whom intelligence, humour and sex were\noften intermingled. \n\nTuring was in fact sensitive to the difficulty of separating\n‘intelligence’ from other aspects of human senses and\nactions; he described ideas for robots with sensory attachments and\nraised questions as to whether they might enjoy strawberries and cream\nor feel racial kinship. In contrast, he paid scant attention to the\nquestions of authenticity and deception implicit in his test,\nessentially because he wished to by-pass questions about the reality of\nconsciousness. A subtle aspect of one of his imagined\n‘intelligent’ conversations (Turing 1950b, p. 434) is where\nthe computer imitates human intelligence by giving the wrong\nanswer to a simple arithmetic problem. But in Turing's setting we\nare not supposed to ask whether the computer ‘consciously’\ndeceives by giving the impression of innumerate humanity, nor why it\nshould wish to do so. There is a certain lack of seriousness in this\napproach. Turing took on a second-rank target in countering the\npublished views of the brain surgeon G. Jefferson, as regards the\nobjectivity of consciousness. Wittgenstein's views on Mind would have\nmade a more serious point of departure. \n\nTuring's imitation principle perhaps also assumes (like\n‘intelligence tests’ of that epoch) too much of a shared\nlanguage and culture for his imagined interrogations. Neither does it\naddress the possibility that there may be kinds of thought, by animals\nor extra-terrestrial intelligences, which are not amenable to\ncommunication. \n\nA more positive feature of the paper lies in its constructive\nprogram for research, culminating in Turing's ideas for ‘learning\nmachines’ and educating ‘child’ machines (Turing\n1950b, p. 454). It is generally thought (e.g. in Dreyfus and Dreyfus\n1990) that there was always an antagonism between programming and the\n‘connectionist’ approach of neural networks. But Turing\nnever expressed such a dichotomy, writing that both approaches should\nbe tried. Donald Michie, the British AI research pioneer profoundly\ninfluenced by early discussions with Turing, has called this suggestion\n‘Alan Turing's Buried Treasure’, in an allusion to a\nbizarre wartime episode in which Michie was himself involved (Hodges\n1983, p. 345). The question is still highly pertinent. \n\nIt is also a commonly expressed view that Artificial Intelligence\nideas only occurred to pioneers in the 1950s after the success\nof computers in large arithmetical calculations. It is hard to see why\nTuring's work, which was rooted from the outset in the question of\nmechanising Mind, has been so much overlooked. But through his failure\nto publish and promote work such as that in (Turing 1948) he largely\nlost recognition and influence. \n\nIt is also curious that Turing's best-known paper should appear in a\njournal of philosophy, for it may well be said that Turing, always\ncommitted to materialist explanation, was not really a philosopher at\nall. Turing was a mathematician, and what he had to offer philosophy\nlay in illuminating its field with what had been discovered in\nmathematics and physics. In the 1950 paper this was surprisingly\ncursory, apart from his groundwork on the concept of computability. His\nemphasis on the sufficiency of the computable to explain the action of\nthe mind was stated more as a hypothesis, even a manifesto, than argued\nin detail. Of his hypothesis he wrote (Turing 1950b, p. 442): \n\nPenrose (1994, p.21), probing into Turing's conjecture, has\npresented it as ‘Turing's thesis’ thus: \n\nThe statement that all physical action is in effect computable goes\nbeyond Turing's explicit words, but is a fair characterisation of the\nimplicit assumptions behind the 1950 paper. Turing's consideration of\n‘The Argument from Continuity in the Nervous System,’ in\nparticular, simply asserts that the physical system of the brain can be\napproximated as closely as is desired by a computer program (Turing\n1950b, p. 451). Certainly there is nothing in Turing's work in the\n1945–50 period to contradict Penrose's interpretation. The more\ntechnical precursor papers (Turing 1947, 1948) include wide-ranging\ncomments on physical processes, but make no reference to the\npossibility of physical effects being uncomputable. \n\nIn particular, a section of (Turing 1948) is devoted to a general\nclassification of ‘machines.’ The period between 1937 and\n1948 had given Turing much more experience of actual machinery than he\nhad in 1936, and his post-war remarks reflected this in a down-to-earth\nmanner. Turing distinguished ‘controlling’ from\n‘active’ machinery, the latter being illustrated by\n‘a bulldozer’. Naturally it is the former—in modern\nterms ‘information-based machinery’—with which\nTuring's analysis is concerned. It is noteworthy that in 1948 as in\n1936, despite his knowledge of physics, Turing made no mention of how\nquantum mechanics might affect the concept of\n‘controlling’. His concept of ‘controlling’\nremained entirely within the classical framework of the Turing machine\n(which he called a Logical Computing Machine in this paper.) \n\nThe same section of (Turing 1948) also drew the distinction between\ndiscrete and continuous machinery, illustrating the\nlatter with ‘the telephone’ as a continuous, controlling\nmachine. He made light of the difficulty of reducing continuous physics\nto the discrete model of the Turing machine, and though citing\n‘the brain’ as a continuous machine, stated that it could\nprobably be treated as if discrete. He gave no indication that physical\ncontinuity threatened the paramount role of computability. In fact, his\nthrust in (Turing 1947) was to promote the digital computer as more\npowerful than analog machines such as the differential analyser.\nWhen he discussed this comparison, he gave the following informal\nversion of the Church-Turing thesis: \n\nTuring gave no hint that the discreteness of the Turing machine\nconstituted a real limitation, or that the non-discrete processes of\nanalog machines might be of any deep significance. \n\nTuring also introduced the idea of ‘random elements’ but\nhis examples (using the digits of π) showed that he considered\npseudo-random sequences (i.e. computable sequences with\nsuitable ‘random’ properties) quite adequate for his\ndiscussion. He made no suggestion that randomness implied something\nuncomputable, and indeed gave no definition of the term\n‘random’. This is perhaps surprising in view of the fact\nthat his work in pure mathematics, logic and cryptography all gave him\nconsiderable motivation to approach this question at a serious\nlevel. \n\nFrom 1950 Turing worked on a new mathematical theory of morphogenesis,\nbased on showing the consequences of non-linear equations for chemical\nreaction and diffusion (Turing 1952). He was a pioneer in using a\ncomputer for such work. Some writers have referred to this theory as\nfounding Artificial Life (A-life), but this is a misleading\ndescription, apt only to the extent that the theory was intended, as\nTuring saw it, to counter the Argument from Design. A-life since the\n1980s has concerned itself with using computers to explore the logical\nconsequences of evolutionary theory without worrying about specific\nphysiological forms. Morphogenesis is complementary, being concerned to\nshow which physiological pathways are feasible for evolution to\nexploit. Turing's work was developed by others in the 1970s and is now\nregarded as central to this field.  \n\nIt may well be that Turing's interest in morphogenesis went back to\na primordial childhood wonder at the appearance of plants and flowers.\nBut in another late development, Turing went back to other stimuli of\nhis youth. For in 1951 Turing did consider the problem, hitherto\navoided, of setting computability in the context of quantum-mechanical\nphysics. In a BBC radio talk of that year (Turing 1951) he discussed\nthe basic groundwork of his 1950 paper, but this time dealing rather\nless certainly with the argument from Gödel's theorem, and this\ntime also referring to the quantum-mechanical physics underlying the\nbrain. Turing described the universal machine property, applying it to\nthe brain, but said that its applicability required that the machine\nwhose behaviour is to be imitated \n\nCopeland (1999) has rightly drawn attention to this sentence in his\npreface to his edition of the 1951 talk. However, Copeland's critical\ncontext suggests some connection with Turing's ‘oracle.’\nThere is is in fact no mention of oracles here (nor anywhere in\nTuring's post-war discussion of mind and machine.) Turing here is\ndiscussing the possibility that, when seen as as a\nquantum-mechanical machine rather than a classical machine,\nthe Turing machine model is inadequate. The correct connection to draw\nis not with Turing's 1938 work on ordinal logics, but with his\nknowledge of quantum mechanics from Eddington and von Neumann in his\nyouth. Indeed, in an early speculation, influenced by Eddington, Turing\nhad suggested that quantum mechanical physics could yield the basis of\nfree-will (Hodges 1983, p. 63). Von Neumann's axioms of quantum\nmechanics involve two processes: unitary evolution of the wave\nfunction, which is predictable, and the measurement or reduction\noperation, which introduces unpredictability. Turing's reference to\nunpredictability must therefore refer to the reduction process. The\nessential difficulty is that still to this day there is no agreed or\ncompelling theory of when or how reduction actually occurs. (It should\nbe noted that ‘quantum computing,’ in the standard modern\nsense, is based on the predictability of the unitary evolution, and\ndoes not, as yet, go into the question of how reduction occurs.) It\nseems that this single sentence indicates the beginning of a new field\nof investigation for Turing, this time into the foundations of quantum\nmechanics. In 1953 Turing wrote to his friend and student Robin Gandy\nthat he was ‘trying to invent a new Quantum Mechanics but it\nwon't really work.’ \n\nAt Turing's death in June 1954, Gandy reported in a letter to Newman\non what he knew of Turing's current work (Gandy 1954). He wrote of\nTuring having discussed a problem in understanding the reduction\nprocess, in the form of \n\nTuring's investigations take on added significance in view of the\nassertion of Penrose (1989, 1990, 1994, 1996) that the reduction\nprocess must involve something uncomputable. Probably Turing was aiming\nat the opposite idea, of finding a theory of the reduction process that\nwould be predictive and computable, and so plug the gap in his\nhypothesis that the action of the brain is computable. However Turing\nand Penrose are alike in seeing this as an important question affecting\nthe assumption that all mental action is computable; in this they both\ndiffer from the mainstream view in which the question is accorded\nlittle significance. \n\nAlan Turing's last postcards to Robin Gandy, in March 1954, headed\n‘Messages from the Unseen World’ in allusion to Eddington,\nhinted at new ideas in the fundamental physics of relativity and\nparticle physics (Hodges 1983, p. 512). They illustrate the wealth of\nideas with which he was concerned at that last point in his life, but\nwhich apart from these hints are entirely lost. A review of such lost\nideas is given in (Hodges 2004), as part of a larger volume on\nTuring's legacy (Teuscher 2004).   \n\nIt is a pity that Turing did not write more about his ethical\nphilosophy and world outlook. As a student he was an admirer of Bernard\nShaw's plays of ideas, and to friends would openly voice both the\nhilarities and frustrations of his many difficult situations. Yet the\nnearest he came to serious personal writing, apart from occasional\ncomments in private letters, was in penning a short story about his\n1952 crisis (Hodges 1983, p. 448). His last two years were particularly\nfull of Shavian drama and Wildean irony. In one letter (to his friend\nNorman Routledge; the letter is now in the Turing Archive at King's\nCollege, Cambridge) he wrote:  \n\nThe syllogistic allusion to Socrates is unmistakeable, and his\ndemise, with cyanide rather than hemlock, may have signalled something\nsimilar. A parallel figure in World War II, Robert Oppenheimer,\nsuffered the loss of his reputation during the same week that Turing\ndied. Both combined the purest scientific work and the most effective\napplication of science in war. Alan Turing was even more directly on\nthe receiving end of science, when his sexual mind was treated as a\nmachine, against his protesting consciousness and will. But amidst all\nthis human drama, he left little to say about what he really thought of\nhimself and his relationship to the world of human events. \n\nAlan Turing did not fit easily with any of the intellectual movements\nof his time, aesthetic, technocratic or marxist. In the 1950s,\ncommentators struggled to find discreet words to categorise him: as\n‘a scientific Shelley,’ as possessing great ‘moral\nintegrity’. Until the 1970s, the reality of his life was\nunmentionable. He is still hard to place within twentieth-century\nthought. He exalted the science that according to existentialists had\nrobbed life of meaning. The most original figure, the most insistent\non personal freedom, he held originality and will to be susceptible to\nmechanisation. The mind of Alan Turing continues to be an\nenigma. \n\nBut it is an enigma to which the twenty-first century seems\nincreasingly drawn. The year of his centenary, 2012, witnessed\nnumerous conferences, publications, and cultural events in his\nhonor. Some reasons for this explosion of interest are obvious. One is\nthat the question of the power and limitations of computation now\narises in virtually every sphere of human activity. Another is that\nissues of sexual orientation have taken on a new importance in modern\ndemocracies. More subtly, the interdisciplinary breadth of Turing's\nwork is now better appreciated. A landmark of the centenary period was\nthe publication of Alan Turing, his work and impact\n(eds. Cooper and van Leeuwen, 2013), which made available almost all\naspects of Turing's scientific oeuvre, with a wealth of modern\ncommentary. In this new climate, fresh attention has been paid to\nTuring's lesser-known work, and new light shed upon his\nachievements. He has emerged from obscurity to become one of the most\nintensely studied figures in modern science."}]
