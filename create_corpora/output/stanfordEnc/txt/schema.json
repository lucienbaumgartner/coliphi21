[{"date.published":"2004-05-28","date.changed":"2016-08-02","url":"https://plato.stanford.edu/entries/schema/","author1":"John Corcoran","author2":"Idris Samawi Hamid","entry":"schema","body.text":"\n\n\nA schema (plural: schemata, or schemas),\nalso known as a scheme (plural: schemes), is a\nlinguistic “template”, “frame”, or\n“pattern” together with a rule for using it to specify a\npotentially infinite multitude of phrases, sentences, or arguments,\nwhich are called instances of the schema. Schemas are used in\nlogic to specify rules of inference, in mathematics to describe\ntheories with infinitely many axioms, and in semantics to give\nadequacy conditions for definitions of truth.\n\n\nA schema is a complex system consisting of \nAmong the best-known schemas is Tarski’s schema T, whose\ntemplate-text is the eight-word two-ellipsis string: \nThe side condition requires that the second blank is to be filled in\nwith a (declarative) sentence of English and the first blank is to be\nfilled in by a name of that sentence (Tarski 1933/1983: 155). The\nfollowing string is an instance:  \nMore revealing instances are obtained by using a sentence not known to\nbe true and not known to be false:  \nThe fourteen-word sentence \nis an instance of the excluded-middle sentence schema for\nEnglish, which involves the template  \nThe side condition is that the two occurrences of ‘\\(A\\)’\nare to be filled by occurrences of the same well-formed English\ndeclarative sentence, that the discontinuous expression ‘Either\n… or … ’; expresses classical non-exclusive\ndisjunction, and that the six-word sentence-prefix ‘it is not\nthe case that’; expresses classical negation. Notice that this\nschema-template is not an English sentence. It would be strictly\nspeaking incoherent to use it as a sentence in an attempted\nassertion. It would also be wrong to call it true or false, though it\ncan be characterized as valid or invalid, in appropriate senses of\nthese ambiguous words.  \nSome logicians seem to identify the schema with the template alone.\n(Tarski’s wording at 1933/1983: 155–6 suggests this\nidentification, while Church’s at 1956: 149 seems calculated to\navoid it.) But one and the same schema-template may be a component of\nany number of different schemata depending on the side condition or\nthe underlying language. Furthermore, since different characters or\nstrings can be used as placeholders (see above) and since even one\nnotational change produces a different syntactic string in the strict\nsense (Corcoran et al. 1974), one and the same set of instances may be\ndetermined by different schema-template/side-condition pairings even\ngiven a fixed language. It may be this fact that leads some authors to\nwrite as though the schema is to be identified with the set of\ninstances. For many purposes it is the set of specified instances that\nis of primary importance and the question of exactly what is involved\nin specifying it is considered a mere technicality. \nSometimes (as in the excluded-middle schema, above) the placeholders\nin a schema-template are marked by letters. It is important to keep in\nmind the distinction between, on one hand, an open sentence, such as\n‘\\((x + y) = (y + x)\\)’; whose object-language numerical\nvariables ‘\\(x\\)’ and ‘\\(y\\)’ range over the\nnumbers and, on the other, a schema such as the number-theoretic\ncommutativity schema whose template-text is ‘\\((X + Y) = (Y\n+ X)\\)’; and whose side condition is that the two occurrences of\n‘\\(X\\)’ are to be replaced by two occurrences of one and\nthe same numeral, and likewise for the two occurrences of\n‘\\(Y\\)’. The numerals belong to the object language, while\nthe place-holders belong to the metalanguage. The variables in the\nobject-language range over a domain of objects, while the ‘dummy\nletters’ in the template-text are just placeholders for syntactic\nsubstituends. (For a careful exposition of the distinction, see Quine\n1945: sec. 1.) \nSchemas may be classed by the syntactic type of their instances as\nsentence schemas, subsentential schemas, or argument-text schemas. We\nhave already seen two examples of sentence schemas. The string \nis the template-text for a subsentential schema, where the\nside condition specifies that the letter ‘\\(A\\)’ be\nreplaced by an arabic numeral. The definite description  \nwould be an instance. Note that this schema is very different from the\nopen term  \nwhere the ‘\\(x\\)’ is an object-language variable. The\nschema is essentially a recipe for generating syntactic instances. The\n‘dummy letter’ ‘\\(A\\)’ in its template-text is\njust a placeholder for substituends (here, numerals). The\n‘\\(x\\)’ in the open term, by contrast, is a variable\nranging over objects (here, numbers).\n \nAn argument-text schema is a schema whose instances are\nargument-texts. An argument-text is a two part system\ncomposed of a set of sentences called the premises and a single\nsentence called the conclusion. (An argument is that which is\nexpressed by an argument-text, as a proposition is that which is\nexpressed by a sentence.) Of the various ways of presenting an\nargument-text perhaps the one least open to misinterpretation is the\npremises-line-conclusion format which consists in listing the premises\nfollowed by a line followed by the conclusion. For example: \nAn example of an argument-text schema is the inference rule modus\nponens: \nThe side condition specifies that ‘\\(A\\)’ and\n‘\\(B\\)’ be replaced with declarative sentences of English,\nand that both occurrences of ‘\\(A\\)’ (and likewise of\n‘\\(B\\)’) be replaced by the same sentence or formula.\n \nAxiom schemas can be thought of as zero-premise argument-text\nschemas. \nSchemas are used in the formalization of logic, mathematics, and\nsemantics. In logic, they are used to specify the axioms and inference\nrules of a system. For example, one formalization of first-order logic\n(in Shapiro 1991: 65) states that \nAny formula obtained by substituting formulas for the Greek letters is\nan axiom: \nwhere \\(t\\) is a term free for \\(x\\) in \\(\\Phi\\), \nand that any inference of the form  \nor (where \\(x\\) does not occur free in \\(\\Phi)\\)  \nis valid.  \nSome mathematical theories can be finitely axiomatized in a\nfirst-order language, but certain historically important number\ntheories and set theories cannot. The axioms of these theories can\nsometimes be specified using schemata. For example, in first-order\nnumber theory the induction principle is specified using the\nschema \nwhere the two blanks marked ‘\\(F(x)\\)’ are to be filled\nwith a first-order formula having one or more free occurrences of the\nvariable ‘\\(x\\)’, the blank marked ‘\\(F(0)\\)’\nis to be filled with the same formula after each free occurrence of\n‘\\(x\\)’ has been replaced by an occurrence of\n‘0’, and the blank labeled ‘\\(F(sx)\\)’ is to\nbe filled with the same formula after each free occurrence of\n‘\\(x\\)’ has been replaced by an occurrence of\n‘\\(sx\\)’.  \nFor example, if we fill the two blanks marked ‘\\(F(x)\\)’\nwith ‘\\(x\\ne s x\\)’, we have:  \nUsing English as the underlying object language, the following\ntemplate-text could be used. \nIf zero is \\(F\\) and the successor of every number that is \\(F\\) is\nalso \\(F\\), then every number is \\(F\\),  \nwhere the four occurrences of ‘\\(F\\)’ are to be filled in\nwith one and the same arithmetic predicate (e.g., ‘smaller than\nsome prime’).  \nIn a second-order formalization of number theory, by contrast, a\nsingle induction axiom can be given:  \nFor every \\(F\\), if zero is \\(F\\) and the successor of every number\nthat is \\(F\\) is also \\(F\\), then every number is \\(F\\). \nHere ‘\\(F\\)’ is not a placeholder in a schema, but a\ngenuine variable ranging over properties or classes (or, on some\ninterpretations, ranging plurally over individuals). For comparisons\nbetween first-order and second-order logic, see Corcoran 1998. \nThe orthographic similarities between the first-order induction schema\nand the second-order induction axiom have an unfortunate tendency to\nobscure the important differences between them. The latter is a\nsentence in the language, whereas the former is just a recipe for\ngenerating sentences. Nor are they inferentially equivalent: the set\nof instances of the first-order induction schema is logically weaker\nthan the second-order induction axiom. That is, there are sentences of\nfirst-order arithmetic that can be deduced from the second-order\ninduction axiom (together with the other axioms of arithmetic, which\nare common to first-order and second-order arithmetic) but not from\nthe instances of the first-order induction schema (see Shapiro 1991:\n110). \nSchemas have also played a prominent role in semantics. Tarski held\nthat an instance of his ‘T-schema’ (which he calls a\n‘scheme’) could be regarded as a “partial definition\nof truth”, or rather of “true sentence”: \nThe general scheme of this kind of sentence can be depicted in the\nfollowing way: \nIn order to obtain concrete definitions we substitute in the place of\nthe symbol ‘\\(p\\)’ in this scheme any sentence, and in the\nplace of ‘\\(x\\)’ any individual name of this sentence.\n(Tarski 1933/1983: 155–6) \nHe took it to be a criterion of adequacy for a definition of\n‘true sentence’ for a language that it have all such\n‘partial definitions’ as consequences (Tarski 1933/1983:\n187–8).  \nIt is important to be clear about the mixed ontological status of\nschemas. The template-text of the schema is a syntactic object, a\nstring of characters, and has the same ontological presuppositions as\nnumerals, words, formulas, and the like. For example, the\ntemplate-text for the English naming schema—‘The\nexpression … names the entity …’— is a\nforty-character expression involving twenty-seven letter-occurrences,\nsix occurrences of the space, and seven occurrences of the period. On\nthe other hand, the side condition is an intensional entity comparable\nto a proposition. \nA schema-template is a string type having indefinitely many tokens in\nPeirce’s sense (Peirce 1906; Corcoran et al. 1974: 638 n. 5).\nBut none of the tokens of a schema-template are instances of the\nschema. In fact, every instance of a schema is a string type having\nits own tokens. The word ‘instance’ is a relation noun for\na relation certain string types bear to certain schemas. The word\n‘token’ is a relation noun for a relation certain\nmacroscopic physical objects bear to certain abstract objects. Neither\na schema nor a schema-template is a common noun denoting the\ninstances, and neither is a proper name of a set of instances. \nSome philosophers emphasize the ontological economies possible by\nusing schemas rather than second-order axioms (e.g., Quine 1970/1986).\nBut rarely if ever do these philosophers present a full and objective\ndiscussion of the “ontological commitments” entailed by\nthe use of schemas. For example, number theory per se\npresupposes the existence of numbers, and perhaps numerical functions\nand numerical properties, but it does not presuppose the existence of\nmathematical notation and it a fortiori does not presuppose\nthe existence of the vast, intricate notational system that we call\nthe language of number theory. Sometimes the use of schemas may\ndecrease the ontological commitments of the object language while\nincreasing those of the metalanguage, or at least not achieving any\nnet savings. \nThe Greek word ‘schema’; was used in Plato’s Academy\nfor “[geometric] figure” and in Aristotle’s Lyceum\nfor “[syllogistic] figure”. Although Aristotle’s\nsyllogistic figures or “schemata” were not schemas in the\nmodern sense, Aristotle’s moods were. For example, the\ntemplate-text of the mood BARBARA is \nThe associated side condition is that (1) both occurrences of\n‘\\(P\\)’ are to be filled with occurrences of one and the\nsame common noun, (2) both occurrences of ‘\\(M\\)’ are to\nbe filled with occurrences of one and the same common noun other than\nthe one used for ‘\\(P\\)’, (3) both occurrences of\n‘\\(S\\)’ are to be filled with occurrences of one and the\nsame common noun other than the ones used for ‘\\(P\\)’ and\n‘\\(M\\)’, and that (4) the expression\n‘belongs-to-every’ is taken to express universal\naffirmative predication as in the Prior analytics.  The rules\nof the Stoic propositional logic have been taken to be schemas. \nIt is hard to date self-conscious use of the word\n‘schema’; in the modern sense. Russell’s\nIntroduction to Mathematical Philosophy (1919) uses it\ncasually to describe propositional functions:  \nA propositional function … may be taken to be a mere schema, a\nmere shell, an empty receptacle for meaning, not something already\nsignificant. (1919: 157)  \nBut propositional functions are not syntactic schemas in the modern\nsense. Tarski’s 1933 truth-definition paper (Tarski 1933/1983:\n157, 160, 172) was one of the first prominent publications to use the\nword ‘scheme’ in a sense close to that of this article\n(Tarski 1933/1983: 155, 156). Tarski also uses the word\n‘schema’, and its plural ‘schemata’, in the\npre-World-War II period (1983: 63–64, 114, 310, 386, 423). \nEarly twentieth-century formalizations of logic used what were called\n“substitution rules” with finite set of axioms instead of\nschemata that specified infinitely many axioms. These\n“substitution rules” were not the familiar rules for\n“substituting equals for equals”; rather they were closer\nto what are called instantiation rules today. The intuitive motivation\nfor “substitution rules” was very simple but the syntactic\ndetails for implementing them were “intolerably\ncomplex”—to use the words of Paul Rosenbloom (1950: 109).\nIn fact several first-rate logicians were led to make embarrassing\nerrors, as Rosenbloom documents in the place just cited. Church (1956:\n158) credits von Neumann with “the device of using axiom\nschemata”, which rendered the (notoriously difficult to state)\nsubstitution rule unnecessary. \nAs Church has emphasized (e.g., 1956: 59), metamathematical treatment\nof schemas requires use of formalized or logically perfect languages\nand an axiomatized theory of strings as found for the first time in\nTarski’s 1933 truth-definition paper (1933/1983: 152–256).\nFor more on the history, philosophy, and mathematics of this important\nbut somewhat neglected field, see Corcoran et al. 1974;\nCorcoran 2006).","contact.mail":"corcoran@acsu.buffalo.edu","contact.domain":"acsu.buffalo.edu"},{"date.published":"2004-05-28","date.changed":"2016-08-02","url":"https://plato.stanford.edu/entries/schema/","author1":"John Corcoran","author2":"Idris Samawi Hamid","entry":"schema","body.text":"\n\n\nA schema (plural: schemata, or schemas),\nalso known as a scheme (plural: schemes), is a\nlinguistic “template”, “frame”, or\n“pattern” together with a rule for using it to specify a\npotentially infinite multitude of phrases, sentences, or arguments,\nwhich are called instances of the schema. Schemas are used in\nlogic to specify rules of inference, in mathematics to describe\ntheories with infinitely many axioms, and in semantics to give\nadequacy conditions for definitions of truth.\n\n\nA schema is a complex system consisting of \nAmong the best-known schemas is Tarski’s schema T, whose\ntemplate-text is the eight-word two-ellipsis string: \nThe side condition requires that the second blank is to be filled in\nwith a (declarative) sentence of English and the first blank is to be\nfilled in by a name of that sentence (Tarski 1933/1983: 155). The\nfollowing string is an instance:  \nMore revealing instances are obtained by using a sentence not known to\nbe true and not known to be false:  \nThe fourteen-word sentence \nis an instance of the excluded-middle sentence schema for\nEnglish, which involves the template  \nThe side condition is that the two occurrences of ‘\\(A\\)’\nare to be filled by occurrences of the same well-formed English\ndeclarative sentence, that the discontinuous expression ‘Either\n… or … ’; expresses classical non-exclusive\ndisjunction, and that the six-word sentence-prefix ‘it is not\nthe case that’; expresses classical negation. Notice that this\nschema-template is not an English sentence. It would be strictly\nspeaking incoherent to use it as a sentence in an attempted\nassertion. It would also be wrong to call it true or false, though it\ncan be characterized as valid or invalid, in appropriate senses of\nthese ambiguous words.  \nSome logicians seem to identify the schema with the template alone.\n(Tarski’s wording at 1933/1983: 155–6 suggests this\nidentification, while Church’s at 1956: 149 seems calculated to\navoid it.) But one and the same schema-template may be a component of\nany number of different schemata depending on the side condition or\nthe underlying language. Furthermore, since different characters or\nstrings can be used as placeholders (see above) and since even one\nnotational change produces a different syntactic string in the strict\nsense (Corcoran et al. 1974), one and the same set of instances may be\ndetermined by different schema-template/side-condition pairings even\ngiven a fixed language. It may be this fact that leads some authors to\nwrite as though the schema is to be identified with the set of\ninstances. For many purposes it is the set of specified instances that\nis of primary importance and the question of exactly what is involved\nin specifying it is considered a mere technicality. \nSometimes (as in the excluded-middle schema, above) the placeholders\nin a schema-template are marked by letters. It is important to keep in\nmind the distinction between, on one hand, an open sentence, such as\n‘\\((x + y) = (y + x)\\)’; whose object-language numerical\nvariables ‘\\(x\\)’ and ‘\\(y\\)’ range over the\nnumbers and, on the other, a schema such as the number-theoretic\ncommutativity schema whose template-text is ‘\\((X + Y) = (Y\n+ X)\\)’; and whose side condition is that the two occurrences of\n‘\\(X\\)’ are to be replaced by two occurrences of one and\nthe same numeral, and likewise for the two occurrences of\n‘\\(Y\\)’. The numerals belong to the object language, while\nthe place-holders belong to the metalanguage. The variables in the\nobject-language range over a domain of objects, while the ‘dummy\nletters’ in the template-text are just placeholders for syntactic\nsubstituends. (For a careful exposition of the distinction, see Quine\n1945: sec. 1.) \nSchemas may be classed by the syntactic type of their instances as\nsentence schemas, subsentential schemas, or argument-text schemas. We\nhave already seen two examples of sentence schemas. The string \nis the template-text for a subsentential schema, where the\nside condition specifies that the letter ‘\\(A\\)’ be\nreplaced by an arabic numeral. The definite description  \nwould be an instance. Note that this schema is very different from the\nopen term  \nwhere the ‘\\(x\\)’ is an object-language variable. The\nschema is essentially a recipe for generating syntactic instances. The\n‘dummy letter’ ‘\\(A\\)’ in its template-text is\njust a placeholder for substituends (here, numerals). The\n‘\\(x\\)’ in the open term, by contrast, is a variable\nranging over objects (here, numbers).\n \nAn argument-text schema is a schema whose instances are\nargument-texts. An argument-text is a two part system\ncomposed of a set of sentences called the premises and a single\nsentence called the conclusion. (An argument is that which is\nexpressed by an argument-text, as a proposition is that which is\nexpressed by a sentence.) Of the various ways of presenting an\nargument-text perhaps the one least open to misinterpretation is the\npremises-line-conclusion format which consists in listing the premises\nfollowed by a line followed by the conclusion. For example: \nAn example of an argument-text schema is the inference rule modus\nponens: \nThe side condition specifies that ‘\\(A\\)’ and\n‘\\(B\\)’ be replaced with declarative sentences of English,\nand that both occurrences of ‘\\(A\\)’ (and likewise of\n‘\\(B\\)’) be replaced by the same sentence or formula.\n \nAxiom schemas can be thought of as zero-premise argument-text\nschemas. \nSchemas are used in the formalization of logic, mathematics, and\nsemantics. In logic, they are used to specify the axioms and inference\nrules of a system. For example, one formalization of first-order logic\n(in Shapiro 1991: 65) states that \nAny formula obtained by substituting formulas for the Greek letters is\nan axiom: \nwhere \\(t\\) is a term free for \\(x\\) in \\(\\Phi\\), \nand that any inference of the form  \nor (where \\(x\\) does not occur free in \\(\\Phi)\\)  \nis valid.  \nSome mathematical theories can be finitely axiomatized in a\nfirst-order language, but certain historically important number\ntheories and set theories cannot. The axioms of these theories can\nsometimes be specified using schemata. For example, in first-order\nnumber theory the induction principle is specified using the\nschema \nwhere the two blanks marked ‘\\(F(x)\\)’ are to be filled\nwith a first-order formula having one or more free occurrences of the\nvariable ‘\\(x\\)’, the blank marked ‘\\(F(0)\\)’\nis to be filled with the same formula after each free occurrence of\n‘\\(x\\)’ has been replaced by an occurrence of\n‘0’, and the blank labeled ‘\\(F(sx)\\)’ is to\nbe filled with the same formula after each free occurrence of\n‘\\(x\\)’ has been replaced by an occurrence of\n‘\\(sx\\)’.  \nFor example, if we fill the two blanks marked ‘\\(F(x)\\)’\nwith ‘\\(x\\ne s x\\)’, we have:  \nUsing English as the underlying object language, the following\ntemplate-text could be used. \nIf zero is \\(F\\) and the successor of every number that is \\(F\\) is\nalso \\(F\\), then every number is \\(F\\),  \nwhere the four occurrences of ‘\\(F\\)’ are to be filled in\nwith one and the same arithmetic predicate (e.g., ‘smaller than\nsome prime’).  \nIn a second-order formalization of number theory, by contrast, a\nsingle induction axiom can be given:  \nFor every \\(F\\), if zero is \\(F\\) and the successor of every number\nthat is \\(F\\) is also \\(F\\), then every number is \\(F\\). \nHere ‘\\(F\\)’ is not a placeholder in a schema, but a\ngenuine variable ranging over properties or classes (or, on some\ninterpretations, ranging plurally over individuals). For comparisons\nbetween first-order and second-order logic, see Corcoran 1998. \nThe orthographic similarities between the first-order induction schema\nand the second-order induction axiom have an unfortunate tendency to\nobscure the important differences between them. The latter is a\nsentence in the language, whereas the former is just a recipe for\ngenerating sentences. Nor are they inferentially equivalent: the set\nof instances of the first-order induction schema is logically weaker\nthan the second-order induction axiom. That is, there are sentences of\nfirst-order arithmetic that can be deduced from the second-order\ninduction axiom (together with the other axioms of arithmetic, which\nare common to first-order and second-order arithmetic) but not from\nthe instances of the first-order induction schema (see Shapiro 1991:\n110). \nSchemas have also played a prominent role in semantics. Tarski held\nthat an instance of his ‘T-schema’ (which he calls a\n‘scheme’) could be regarded as a “partial definition\nof truth”, or rather of “true sentence”: \nThe general scheme of this kind of sentence can be depicted in the\nfollowing way: \nIn order to obtain concrete definitions we substitute in the place of\nthe symbol ‘\\(p\\)’ in this scheme any sentence, and in the\nplace of ‘\\(x\\)’ any individual name of this sentence.\n(Tarski 1933/1983: 155–6) \nHe took it to be a criterion of adequacy for a definition of\n‘true sentence’ for a language that it have all such\n‘partial definitions’ as consequences (Tarski 1933/1983:\n187–8).  \nIt is important to be clear about the mixed ontological status of\nschemas. The template-text of the schema is a syntactic object, a\nstring of characters, and has the same ontological presuppositions as\nnumerals, words, formulas, and the like. For example, the\ntemplate-text for the English naming schema—‘The\nexpression … names the entity …’— is a\nforty-character expression involving twenty-seven letter-occurrences,\nsix occurrences of the space, and seven occurrences of the period. On\nthe other hand, the side condition is an intensional entity comparable\nto a proposition. \nA schema-template is a string type having indefinitely many tokens in\nPeirce’s sense (Peirce 1906; Corcoran et al. 1974: 638 n. 5).\nBut none of the tokens of a schema-template are instances of the\nschema. In fact, every instance of a schema is a string type having\nits own tokens. The word ‘instance’ is a relation noun for\na relation certain string types bear to certain schemas. The word\n‘token’ is a relation noun for a relation certain\nmacroscopic physical objects bear to certain abstract objects. Neither\na schema nor a schema-template is a common noun denoting the\ninstances, and neither is a proper name of a set of instances. \nSome philosophers emphasize the ontological economies possible by\nusing schemas rather than second-order axioms (e.g., Quine 1970/1986).\nBut rarely if ever do these philosophers present a full and objective\ndiscussion of the “ontological commitments” entailed by\nthe use of schemas. For example, number theory per se\npresupposes the existence of numbers, and perhaps numerical functions\nand numerical properties, but it does not presuppose the existence of\nmathematical notation and it a fortiori does not presuppose\nthe existence of the vast, intricate notational system that we call\nthe language of number theory. Sometimes the use of schemas may\ndecrease the ontological commitments of the object language while\nincreasing those of the metalanguage, or at least not achieving any\nnet savings. \nThe Greek word ‘schema’; was used in Plato’s Academy\nfor “[geometric] figure” and in Aristotle’s Lyceum\nfor “[syllogistic] figure”. Although Aristotle’s\nsyllogistic figures or “schemata” were not schemas in the\nmodern sense, Aristotle’s moods were. For example, the\ntemplate-text of the mood BARBARA is \nThe associated side condition is that (1) both occurrences of\n‘\\(P\\)’ are to be filled with occurrences of one and the\nsame common noun, (2) both occurrences of ‘\\(M\\)’ are to\nbe filled with occurrences of one and the same common noun other than\nthe one used for ‘\\(P\\)’, (3) both occurrences of\n‘\\(S\\)’ are to be filled with occurrences of one and the\nsame common noun other than the ones used for ‘\\(P\\)’ and\n‘\\(M\\)’, and that (4) the expression\n‘belongs-to-every’ is taken to express universal\naffirmative predication as in the Prior analytics.  The rules\nof the Stoic propositional logic have been taken to be schemas. \nIt is hard to date self-conscious use of the word\n‘schema’; in the modern sense. Russell’s\nIntroduction to Mathematical Philosophy (1919) uses it\ncasually to describe propositional functions:  \nA propositional function … may be taken to be a mere schema, a\nmere shell, an empty receptacle for meaning, not something already\nsignificant. (1919: 157)  \nBut propositional functions are not syntactic schemas in the modern\nsense. Tarski’s 1933 truth-definition paper (Tarski 1933/1983:\n157, 160, 172) was one of the first prominent publications to use the\nword ‘scheme’ in a sense close to that of this article\n(Tarski 1933/1983: 155, 156). Tarski also uses the word\n‘schema’, and its plural ‘schemata’, in the\npre-World-War II period (1983: 63–64, 114, 310, 386, 423). \nEarly twentieth-century formalizations of logic used what were called\n“substitution rules” with finite set of axioms instead of\nschemata that specified infinitely many axioms. These\n“substitution rules” were not the familiar rules for\n“substituting equals for equals”; rather they were closer\nto what are called instantiation rules today. The intuitive motivation\nfor “substitution rules” was very simple but the syntactic\ndetails for implementing them were “intolerably\ncomplex”—to use the words of Paul Rosenbloom (1950: 109).\nIn fact several first-rate logicians were led to make embarrassing\nerrors, as Rosenbloom documents in the place just cited. Church (1956:\n158) credits von Neumann with “the device of using axiom\nschemata”, which rendered the (notoriously difficult to state)\nsubstitution rule unnecessary. \nAs Church has emphasized (e.g., 1956: 59), metamathematical treatment\nof schemas requires use of formalized or logically perfect languages\nand an axiomatized theory of strings as found for the first time in\nTarski’s 1933 truth-definition paper (1933/1983: 152–256).\nFor more on the history, philosophy, and mathematics of this important\nbut somewhat neglected field, see Corcoran et al. 1974;\nCorcoran 2006).","contact.mail":"ishamid@colostate.edu","contact.domain":"colostate.edu"}]
