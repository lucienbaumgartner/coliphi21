[{"date.published":"2006-02-08","date.changed":"2018-07-17","url":"https://plato.stanford.edu/entries/type-theory/","author1":"Thierry Coquand","author1.info":"http://www.cs.chalmers.se/~coquand","entry":"type-theory","body.text":"\n\n\n\nThe topic of type theory is fundamental both in logic and computer\nscience. We limit ourselves here to sketch some aspects that are\nimportant in logic. For the importance of types in computer science, we\nrefer the reader for instance to Reynolds 1983 and 1985. \n\n\n\nThe theory of types was introduced by Russell in order to cope with\nsome contradictions he found in his account of set theory and was\nintroduced in “Appendix B: The Doctrine of Types”\nof Russell 1903. This contradiction was obtained by analysing a\ntheorem of Cantor that no mapping \n\n(where \\(\\Pow(X)\\) is the class of subclasses of a class\n\\(X)\\) can be surjective; that is, \\(F\\) cannot be such that\nevery member \\(b\\) of \\(\\Pow(X)\\) is equal to\n\\(F(a)\\) for some element \\(a\\) of \\(X\\). This\ncan be phrased “intuitively” as the fact that there are\nmore subsets of \\(X\\) than elements of \\(X\\). The proof of\nthis fact is so simple and basic that it is worthwhile giving it\nhere. Consider the following subset of \\(X\\): \n\nThis subset cannot be in the range of \\(F\\). For if \\(A = F(a)\\), for some \\(a\\), then  \n\nwhich is a contradiction. Some remarks are in order. First, the proof\ndoes not use the law of excluded middle and is thus valid\nintuitionistically. Second, the method that is used, called\ndiagonalisation was already present in the work of du\nBois-Reymond for building real functions growing faster than any\nfunction in a given sequence of functions.  \n\nRussell analysed what happens if we apply this theorem to the case\nwhere A is the class of all classes, admitting that there is such a\nclass. He was then lead to consider the special class of classes that\ndo not belong to themselves \n\nWe then have \n\nIt seems indeed that Cantor was already aware of the fact that the\nclass of all sets cannot be considered itself to be a set. \n\nRussell communicated this problem to Frege, and his letter, together\nwith Frege’s answer appear in van Heijenoort 1967. It is important\nto realise that the formulation (*) does not apply as it is to Frege’s\nsystem. As Frege himself wrote in his reply to Russell, the expression\n“a predicate is predicated of itself” is not exact. Frege\nhad a distinction between predicates (concepts) and\nobjects. A (first-order) predicate applies to an object but\nit cannot have a predicate as argument. The exact formulation of the\nparadox in Frege’s system uses the notion of the extension of\na predicate \\(P\\), which we designate as \\(\\varepsilon P\\).\nThe extension of a predicate is itself an object. The important axiom\nV is: \n\nThis axiom asserts that the extension of \\(P\\) is identical to the\nextension of \\(Q\\) if and only if \\(P\\) and \\(Q\\) are materially\nequivalent. We can then translate Russell’s paradox (*) in\nFrege’s system by defining the predicate \n\nIt can then been checked, using Axiom V in a crucial way, that  \n\nand we have a contradiction as well. (Notice that for defining the\npredicate \\(R\\), we have used an impredicative\nexistential quantification on predicates. It can be shown that the\npredicative version of Frege’s system is consistent (see\nHeck 1996 and for further refinements Ferreira 2002). \n\nIt is clear from this account that an idea of types was already\npresent in Frege’s work: there we find a distinction between objects,\npredicates (or concepts), predicates of predicates, etc. (This point\nis stressed in Quine 1940.) This hierarchy is called the\n“extensional hierarchy” by Russell (1959), and its\nnecessity was recognised by Russell as a consequence of his\nparadox. \n\nAs we saw above, the distinction: objects, predicates, predicate of\npredicates, etc., seems enough to block Russell’s paradox (and this\nwas recognised by Chwistek and Ramsey). We first describe the type\nstructure as it is in Principia and later in this section we\npresent the elegant formulation due to Church 1940 based on\n\\(\\lambda\\)-calculus. The types can be defined as \n\nFor instance, the type of binary relations over individuals is\n\\((i, i)\\), the type of binary connectives is\n\\(((\\,),(\\,))\\), the type of quantifiers over individuals is\n\\(((i))\\). \n\nFor forming propositions we use this type structure: thus \\(R(a_1\n,\\ldots ,a_n)\\) is a proposition if \\(R\\) is of type \\((A_1 ,\\ldots\n,A_n)\\) and \\(a_i\\) is of type \\(A_i\\) for \\(i = 1,\\ldots ,n\\). This\nrestriction makes it impossible to form a proposition of the form\n\\(P(P)\\): the type of \\(P\\) should be of the form \\((A)\\), and \\(P\\)\ncan only be applied to arguments of type \\(A\\), and thus cannot be\napplied to itself since \\(A\\) is not the same as \\((A)\\). \n\nHowever simple type theory is not predicative: we can define an object\n\\(Q(x, y)\\) of type \\((i, i)\\)\nby \n\nAssume that we have two individuals \\(a\\) and \\(b\\) such that \\(Q(a,\nb)\\) holds. We can define \\(P(x)\\) to be \\(Q(x, a)\\). It is then clear\nthat \\(P(a)\\) holds, since it is \\(Q(a, a)\\). Hence \\(P(b)\\) holds as\nwell. We have proved, in an impredicative way, that \\(Q(a, b)\\)\nimplies \\(Q(b, a)\\). \n\nAlternative simpler formulations, which retain only the notion of\nclasses, classes of classes, etc., were formulated by Gödel and\nTarski. Actually this simpler version was used by Gödel in his\n1931 paper on formally undecidable propositions. The discovery of the undecidable\npropositions may have been motivated by a heuristic argument that it is unlikely that\none can extend the completeness theorem of first-order logic to type theory (see the end of his Lecture at Königsberg 1930 in Gödel Collected Work, \nVolume III and Goldfarb 2005). \nTarski had a version of the definability theorem expressed in type theory\n(see Hodges 2008). See Schiemer and Reck 2013.  \n We have objects of\ntype 0, for individuals, objects of type 1, for classes of\nindividuals, objects of type 2, for classes of classes of individuals,\nand so on. Functions of two or more arguments, like relations, need\nnot be included among primitive objects since one can define relations\nto be classes of ordered pairs, and ordered pairs to be classes of\nclasses. For example, the ordered pair of individuals a, b\ncan be defined to be \\(\\{\\{a\\},\\{a,b\\}\\}\\) where\n\\(\\{x,y\\}\\) denotes the class whose sole elements are\n\\(x\\) and \\(y\\). (Wiener 1914 had suggested a similar\nreduction of relations to classes.) In this system, all propositions\nhave the form \\(a(b)\\), where \\(a\\) is a sign of\ntype \\(n+1\\) and \\(b\\) a sign of type \\(n\\). Thus this\nsystem is built on the concept of an arbitrary class or subset of\nobjects of a given domain and on the fact that the collection\nof all subsets of the given domain can form a new domain of\nthe next type. Starting from a given domain of individuals, this\nprocess is then iterated. As emphasised for instance in Scott 1993, in\nset theory this process of forming subsets is iterated into\nthe transfinite. \n\nIn these versions of type theory, as in set theory, functions are not\nprimitive objects, but are represented as functional relation. The\naddition function for instance is represented as a ternary relation by\nan object of type \\((i,i,i)\\). An elegant\nformulation of the simple type theory which extends it by introducing\nfunctions as primitive objects was given by Church in 1940. It uses\nthe \\(\\lambda\\)-calculus notation (Barendregt 1997). Since such a\nformulation is important in computer science, for the connection with\ncategory theory, and for Martin-Löf type theory, we describe it\nin some detail. In this formulation, predicates are seen as a special\nkind of functions (propositional functions), an idea that goes back to\nFrege (see for instance Quine 1940). Furthermore, the notion of\nfunction is seen as more primitive than the notion of predicates and\nrelations, and a function is not defined anymore as a special kind of\nrelation. (Oppenheimer and Zalta 2011 presents some arguments against\nsuch a primitive representation of functions.) The types of this\nsystem are defined inductively as follows \n\nWe can form in this way the types: \n\nwhich correspond to the types \\((i)\\) and \\(((i))\\) but also\nthe new types \n\nIt is convenient to write  for In this way \ncorresponds to the type \\((A_1 ,\\ldots ,A_n)\\). \n\nFirst-order logic considers only types of the form Notice that  \nstands for  \n\n(association to the right).  \n\nFor the terms of this logic, we shall not follow Church’s account but\na slight variation of it, due to Curry (who had similar ideas before\nChurch’s paper appeared) and which is presented in detail in\nR. Hindley’s book on type theory. Like Church, we use\n\\(\\lambda\\)-calculus, which provides a general notation for functions \n Here we have used the so-called BNF notation, very convenient in\ncomputing science. This gives a syntactic specification of the\n\\(\\lambda\\)-terms which, when expanded, means:  \n\nThe notation for function application \\(M N\\) is a\nlittle different than the mathematical notation, which would be\n\\(M(N)\\). In general, stands for \n\n(association to the left). The term \\(\\lambda x.M\\) represents the\nfunction which to \\(N\\) associates \\(M[x:=N\\)]. This notation is so\nconvenient that one wonders why it is not widely used in\nmathematics. The main equation of \\(\\lambda\\)-calculus is then\n\\((\\beta\\)-conversion) \n\nwhich expresses the meaning of \\(\\lambda x.M\\)\nas a function. We have used \\(M[x:=N\\)] as a\nnotation for the value of the expression that results when \\(N\\)\nis substituted for the variable \\(x\\) in the matrix \\(M\\).\nOne usually sees this equation as a rewrite rule\n\\((\\beta\\)-reduction) \n\nIn untyped lambda calculus, it may be that such rewriting\ndoes not terminate. The canonical example is given by the term\n\\(\\Delta = \\lambda x.x x\\) and the application \n\n(Notice the similarity with Russell’s paradox.) The idea of\nCurry is then to look at types as predicates over lambda terms,\nwriting \\(M:A\\) to express that \\(M\\) satisfies the predicate/type\n\\(A\\). The meaning of is then  \n\nwhich justifies the following rules  \n\nIn general one works with judgements of the form  \n\nwhere \\(x_1,..., x_n\\) are distinct\nvariables, and \\(M\\) is a term having all free variables among\n\\(x_1,..., x_n\\). In order to be\nable to get Church’s system, one adds some constants in order to form\npropositions. Typically \n\nThe term  \n\nrepresents the predicate of predicates that do not apply to themselves.\nThis term does not have a type however, that is, it is not possible to\nfind \\(A\\) such that  \n\nwhich is the formal expression of the fact that Russell’s paradox\ncannot be expressed. Leibniz equality  \n\nwill be defined as  \n\nOne usually writes \\(\\forall x[M\\)] instead of \\(\\forall(\\lambda\nx.M)\\), and the definition of \\(Q\\) can then be rewritten as \n\nThis example again illustrates that we can formulate impredicative definitions\nin simple type theory.  \n\nThe use of \\(\\lambda\\)-terms and \\(\\beta\\)-reduction is most\nconvenient for representing the complex substitution rules that are\nneeded in simple type theory. For instance, if we want to substitute\nthe predicate \\(\\lambda x.Q a x\\) for \\(P\\) in the proposition we get  and, using \\(\\beta\\)-reduction, \n\nIn summary, simple type theory forbids self-application but not the\ncircularity present in impredicative definitions.  \n\nThe \\(\\lambda\\)-calculus formalism also allows for a clearer analysis\nof Russell’s paradox. We can see it as the definition of the\npredicate \n\nIf we think of \\(\\beta\\)-reduction as the process of unfolding a\ndefinition, we see that there is a problem already with understanding\nthe definition of R R \n\nIn some sense, we have a non-wellfounded definition, which is as\nproblematic as a contradiction (a proposition equivalent to its\nnegation). One important theorem, the normalisation theorem, says that\nthis cannot happen with simple types: if we have\n\\(M:A\\) then \\(M\\) is normalisable in a\nstrong way (any sequence of reductions starting from \\(M\\)\nterminates). \n\nFor more information on this topic, we refer to the entry on\nChurch’s simple type theory. \n\nRussell introduced another hierarchy, that was not motivated by any\nformal paradoxes expressed in a formal system, but rather by the fear\nof “circularity” and by informal paradoxes similar to the\nparadox of the liar. If a man says “I am lying”, then we\nhave a situation reminiscent of Russell’s paradox: a proposition which\nis equivalent to its own negation. Another informal such paradoxical\nsituation is obtained if we define an integer to be the “least\ninteger not definable in less than 100 words”. In order to\navoid such informal paradoxes, Russell thought it necessary to\nintroduce another kind of hierarchy, the so-called “ramified\nhierarchy”. The need for such a hierarchy is hinted in Appendix\nB of Russell 1903. Interestingly this is connected there to the\nquestion of the identity of equivalent propositions and of the logical\nproduct of a class of propositions. A thorough discussion can be found\nin Chapter 10 of Russell 1959. Since this notion of ramified\nhierarchy has been extremely influential in logic and especially proof\ntheory, we describe it in some details.  \n\nIn order to further motivate this hierarchy, here is one example due\nto Russell. If we say  \n  Napoleon was Corsican.\n \n\nwe do not refer in this sentence to any assemblage of properties. The\nproperty “to be Corsican” is said to be\npredicative. If we say on the other hand \nNapoleon had all the qualities of a great general\n \n\nwe are referring to a totality of qualities. The property “to\nhave all qualities of a great general” is said to be\nimpredicative.  \n\nAnother example, also coming from Russell, shows how impredicative \nproperties can potentially lead to problems reminiscent \nof the liar paradox. Suppose that we suggest the definition \nA typical Englishman is one who possesses all the properties possessed\nby a majority of Englishmen. \n\nIt is clear that most Englishmen do not possess all the\nproperties that most Englishmen possess. Therefore, a typical\nEnglishman, according to this definition, should be untypical. The\nproblem, according to Russell, is that the word “typical”\nhas been defined by a reference to all properties and has been treated\nas itself a property. (It is remarkable that similar problems arise\nwhen defining the notion of random numbers, cf.\nMartin-Löf “Notes on constructive mathematics”\n(1970).) Russell introduced the ramified hierarchy in order\nto deal with the apparent circularity of such impredicative\ndefinitions. One should make a distinction between the\nfirst-order properties, like being Corsican, that do not\nrefer to the totality of properties, and consider that the\nsecond-order properties refer only to the totality of\nfirst-order properties. One can then introduce third-order\nproperties, that can refer to the totality of second-order property,\nand so on. This clearly eliminates all circularities connected to\nimpredicative definitions. \n\nAt about the same time, Poincaré carried out a similar\nanalysis. He stressed the importance of “predicative”\nclassifications, and of not defining elements of a class using a\nquantification over this class (Poincaré\n1909). Poincaré used the following example. Assume that we have\na collection with elements 0, 1 and an operation + satisfying \n\nLet us say that a property is inductive if it holds of \n0 and holds for \\(x+1\\) if it holds for \\(x\\). \n \n\nAn impredicative, and potentially “dangerous”, definition\nwould be to define an element to be a number if it satisfies\nall inductive properties. It is then easy to show that this\nproperty “to be a number” is itself inductive. Indeed, 0\nis a number since it satisfies all inductive properties, and if \\(x\\)\nsatisfies all inductive properties then so does \\(x+1\\). Similarly it\nis easy to show that \\(x+y\\) is a number if \\(x,y\\) are\nnumbers. Indeed the property \\(Q(z)\\) that \\(x+z\\) is a number is\ninductive: \\(Q\\)(0) holds since \\(x+0=x\\) and if \\(x+z\\) is a number\nthen so is \\(x+(z+1) = (x+z)+1\\). This whole argument however is\ncircular since the property “to be a number” is not\npredicative and should be treated with suspicion.  \n\nInstead, one should introduce a ramified hierarchy of properties and\nnumbers. At the beginning, one has only first-order inductive\nproperties, which do not refer in their definitions to a totality of\nproperties, and one defines the numbers of order 1 to be the elements\nsatisfying all first-order inductive properties. One can next consider\nthe second-order inductive properties, that can refer to the\ncollection of first-order properties, and the numbers of order 2, that\nare the elements satisfying the inductive properties of order 2. One\ncan then similarly consider numbers of order 3, and so\non. Poincaré emphasizes the fact that a number of order 2 is\na fortiori a number of order 1, and more generally, a number\nof order \\(n+1\\) is a fortiori a number of order \\(n\\). We\nhave thus a sequence of more and more restricted properties: inductive\nproperties of order 1, 2, … and a sequence of more and more\nrestricted collections of objects: numbers of order 1, 2, …\nAlso, the property “to be a number of order \\(n\\)” is\nitself an inductive property of order \\(n+1\\).  \n\nIt does not seem possible to prove that \\(x+y\\) is a number of order\n\\(n\\) if \\(x,y\\) are numbers of order \\(n\\). On the other hand, it is\npossible to show that if \\(x\\) is a number of order \\(n+1\\), and \\(y\\)\na number of order \\(n+1\\) then \\(x+y\\) is a number of order\n\\(n\\). Indeed, the property \\(P(z)\\) that “\\(x+z\\) is a number\nof order \\(n\\)” is an inductive property of order \\(n+1: P\\)(0)\nholds since \\(x+0 = x\\) is a number of order \\(n+1\\), and hence of\norder \\(n\\), and if \\(P(z)\\) holds, that is if \\(x+z\\) is a number of\norder \\(n\\), then so is \\(x+(z+1) = (x+z)+1\\), and so \\(P(z+1)\\)\nholds. Since \\(y\\) is a number of order \\(n+1\\), and \\(P(z)\\) is an\ninductive property of order \\(n+1, P(y)\\) holds and so \\(x+y\\) is\na number of order \\(n\\). This example illustrates well the\ncomplexities introduced by the ramified hierarchy.   \n\nThe complexities are further amplified if one, like Russell as for\nFrege, defines even basic objects like natural numbers as classes of\nclasses. For instance the number 2 is defined as the class of all\nclasses of individuals having exactly two elements. We again obtain\nnatural numbers of different orders in the ramified hierarchy.\nBesides Russell himself, and despite all these complications, Chwistek\ntried to develop arithmetic in a ramified way, and the interest of\nsuch an analysis was stressed by Skolem. See Burgess and Hazen 1998\nfor a recent development.  \n\nAnother mathematical example, often given, of an impredicative\ndefinition is the definition of least upper bound of a bounded class\nof real numbers. If we identify a real with the set of rationals that\nare less than this real, we see that this least upper bound can be\ndefined as the union of all elements in this class. Let us identify\nsubsets of the rationals as predicates. For example, for rational\nnumbers \\(q, P(q)\\) holds iff \\(q\\) is a\nmember of the subset identified as \\(P\\). Now, we define the\npredicate \\(L_C\\) (a subset of the rationals)\nto be the least upper bound of class \\(C\\) as: \n\nwhich is impredicative: we have defined a predicate \\(L\\) by an\nexistential quantification over all predicates. In the ramified\nhierarchy, if \\(C\\) is a class of first-order classes of\nrationals, then \\(L\\) will be a second-order class of\nrationals. One obtains then not one notion or real numbers,\nbut real numbers of different orders 1, 2, … The least upper\nbound of a collection of reals of order 1 will then be at least of\norder 2 in general.\n \n\nAs we saw earlier, yet another example of an impredicative definition\nis given by Leibniz’ definition of equality. For Leibniz, the\npredicate “is equal to \\(a\\)” is true for \\(b\\)\niff \\(b\\) satisfies all the predicates satisfied by \\(a\\).\n \n\nHow should one deal with the complications introduced by the ramified\nhierarchy? Russell showed, in the introduction to the second edition\nto\n Principia Mathematica,\n that these complications can be avoided in some\ncases. He even thought, in Appendix B of the second edition of\nPrincipia Mathematica, that the ramified hierarchy of natural\nnumbers of order 1,2,… collapses at order 5. However,\nGödel later found a problem in his argument, and indeed, it was\nshown by Myhill 1974 that this hierarchy actually does not\ncollapse at any finite level. A similar problem, discussed by Russell\nin the introduction to the second edition to\n Principia Mathematica\n arises in the proof of Cantor’s theorem that\nthere cannot be any injective functions from the collection of all\npredicates to the collection of all objects (the version of Russell’s\nparadox in Frege’s system that we presented in the introduction). Can\nthis be done in a ramified hierarchy? Russell doubted that this could\nbe done within a ramified hierarchy of predicates and this was indeed\nconfirmed indeed later (Heck 1996).  \n\nBecause of these problems, Russell and Whitehead introduced in the\nfirst edition of Principia Mathematica the following\nreducibility axiom: the hierarchy of predicates, first-order,\nsecond-order, etc., collapses at level 1. This means that for any\npredicate of any order, there is a predicate of the first-order level\nwhich is equivalent to it. In the case of equality for instance, we\npostulate a first-order relation “\\(a=b\\)”\nwhich is equivalent to “\\(a\\) satisfies all properties that\n\\(b\\) satisfies”. The motivation for this axiom was purely\npragmatic. Without it, all basic mathematical notions, like real or\nnatural numbers are stratified into different orders. Also, despite\nthe apparent circularity of impredicative definitions, the axiom of\nreducibility does not seem to lead to inconsistencies.  \n\nAs noticed however first by Chwistek, and later by Ramsey, in the\npresence of the axiom of reducibility, there is actually no point in\nintroducing the ramified hierarchy at all! It is much simpler to\naccept impredicative definitions from the start. The simple\n“extensional” hierarchy of individuals, classes, classes\nof classes, … is then enough. We get in this way the simpler\nsystems formalised in Gödel 1931 or Church 1940 that were\npresented above.  \n\nThe axiom of reducibility draws attention to the problematic status of\nimpredicative definitions. To quote Weyl 1946, the axiom of\nreducibility “is a bold, an almost fantastic axiom; there is\nlittle justification for it in the real world in which we live, and\nnone at all in the evidence on which our mind bases its\nconstructions”! So far, no contradictions have been found using\nthe reducibility axiom. However, as we shall see below,\nproof-theoretic investigations confirm the extreme strength of such a\nprinciple.  \n\nThe idea of the ramified hierarchy has been extremely important in\nmathematical logic. Russell considered only the finite iteration of\nthe hierarchy: first-order, second-order, etc., but from the\nbeginning, the possibility of extending the ramification transfinitely\nwas considered. Poincaré (1909) mentions the work of Koenig in\nthis direction. For the example above of numbers of different order,\nhe also defines a number to be inductive of order \\(\\omega\\) if it is\ninductive of all finite orders. He then points out that x+y\nis inductive of order \\(\\omega\\) if both \\(x\\) and \\(y\\)\nare. This shows that the introduction of transfinite orders can in\nsome case play the role of the axiom of reducibility. Such transfinite\nextension of the ramified hierarchy was analysed further by Gödel\nwho noticed the key fact that the following form of the reducibility\naxiom is actually provable: when one extends the ramified\nhierarchy of properties over the natural numbers into the transfinite\nthis hierarchy collapses at level \\(\\omega_1\\), the least\nuncountable ordinal (Gödel 1995, and Prawitz\n1970). Furthermore, while at all levels \\(\\lt \\omega_1\\), the\ncollection of predicates is countable, the collection of predicates at\nlevel \\(\\omega_1\\) is of cardinality \\(\\omega_1\\). This\nfact was a strong motivation behind Gödel’s model of\nconstructible sets. In this model the collection of all subsets of the\nset of natural numbers (represented by predicates) is of cardinality\n\\(\\omega_1\\) and is similar to the ramified hierarchy. This\nmodel satisfies in this way the Continuum Hypothesis, and gives a\nrelative consistency proof of this axiom. (The motivation of\nGödel was originally only to build a model where the collection\nof all subsets of natural numbers is well-ordered.) \n\nThe ramified hierarchy has been also the source of much work in proof\ntheory. After the discovery by Gentzen that the consistency of\nArithmetic could be proved by transfinite induction (over decidable\npredicates) along the ordinal \\(\\varepsilon_0\\), the natural question\nwas to find the corresponding ordinal for the different levels of the\nramified hierarchy. Schütte (1960) found that for the first level\nof the ramified hierarchy, that is if we extend arithmetic by\nquantifying only over first-order properties, we get a system of\nordinal strength \\(\\varepsilon_{\\varepsilon_0}\\). For the second level\nwe get the ordinal strength \\(\\varepsilon_{\\varepsilon_{\n\\varepsilon_0}}\\), etc. We recall that \\(\\varepsilon_{\\alpha}\\)\ndenotes the \\(\\alpha\\)-th \\(\\varepsilon\\)-ordinal number, an\n\\(\\varepsilon\\)-ordinal number being an ordinal \\(\\beta\\) such that\n\\(\\omega^{\\beta} = \\beta\\), see Schütte (1960). \n\nGödel stressed the fact that his approach to the problem of the\ncontinuum hypothesis was not constructive, since it needs the\nuncountable ordinal \\(\\omega_1\\), and it was natural to study\nthe ramified hierarchy along constructive ordinals. After preliminary\nworks of Lorenzen and Wang, Schütte analysed what happens if we\nproceed in the following more constructive way. Since arithmetic has\nfor ordinal strength \\(\\varepsilon_0\\) we consider first the\niteration of the ramified hierarchy up to \\(\\varepsilon_0\\).\nSchütte computed the ordinal strength of the resulting system and\nfound an ordinal strength \\(u(1)\\gt \\varepsilon_0\\). We\niterate then ramified hierarchy up to this ordinal \\(u(1)\\) and\nget a system of ordinal strength \\(u(2)\\gt u(1)\\),\netc. Each \\(u(k)\\) can be computed in terms of the\nso-called Veblen hierarchy: \\(u(k+1)\\) is\n\\(\\phi_{u(k)}(0)\\). The limit of this process\ngives an ordinal called \\(\\Gamma_0\\): if we iterate the\nramified hierarchy up to the ordinal \\(\\Gamma_0\\) we get a\nsystem of ordinal strength \\(\\Gamma_0\\). Such an ordinal was\nobtained independently about the same time by S. Feferman. It has been\nclaimed that \\(\\Gamma_0\\) plays for predicative systems a role\nsimilar to \\(\\varepsilon_0\\) for Arithmetic. Recent\nproof-theoretical works however are concerned with systems having\nbigger proof-theoretical ordinals that can be considered predicative\n(see for instance Palmgren 1995). \n\nBesides these proof theoretic investigations related to the ramified\nhierarchy, much work has been devoted in proof theory to analysing the\nconsistency of the axiom of reducibility, or, equivalently, the\nconsistency of impredicative definitions. Following Gentzen’s\nanalysis of the cut-elimination property in the sequent calculus,\nTakeuti found an elegant sequent formulation of simple type theory\n(without ramification) and made the bold conjecture that\ncut-elimination should hold for this system. This conjecture seemed at\nfirst extremely dubious given the circularity of impredicative\nquantification, which is well reflected in this formalism. The rule\nfor quantifications is indeed \n\nwhere \\(T\\) is any term predicate, which may itself\ninvolve a quantification over all predicates. Thus the formula\n\\(A[X:=T]\\) may be itself much more complex\nthan the formula \\(A(X)\\).   \n\nOne early result is that cut-elimination for Takeuti’s impredicative\nsystem implies in a finitary way the consistency of second-order\nArithmetic. (One shows that this implies the consistency of a suitable\nform of infinity axiom, see Andrews 2002.) Following work by\nSchütte, it was later shown by W. Tait and D. Prawitz that indeed\nthe cut-elimination property holds (the proof of this has to use a\nstronger proof theoretic principle, as it should be according to the\nincompleteness theorem.)  \n\nWhat is important here is that these studies have revealed the extreme\npower of impredicative quantification or, equivalently, the extreme\npower of the axiom of reducibility. This confirms in some way the\nintuitions of Poincaré and Russell. The proof-theoretic\nstrength of second-order Arithmetic is way above all ramified\nextensions of Arithmetic considered by Schütte. On the other\nhand, despite the circularity of impredicative definitions, which is\nmade so explicit in Takeuti’s calculus, no paradoxes have been found\nyet in second-order Arithmetic. \n\nAnother research direction in proof theory has been to understand how\nmuch of impredicative quantification can be explained from principles\nthat are available in intuitionistic mathematics. The strongest such\nprinciples are strong forms of inductive definitions. With such\nprinciples, one can explain a limited form of an impredicative\nquantification, called \\(\\Pi_{1}^1\\)-comprehension,\nwhere one uses only one level of impredicative quantification over\npredicates. Interestingly, almost all known uses of impredicative\nquantifications: Leibniz equality, least upper bound, etc., can be\ndone with \\(\\Pi_{1}^1\\)-comprehension. This reduction\nof \\(\\Pi_{1}^1\\)-comprehension was first achieved by\nTakeuti in a quite indirect way, and was later simplified by Buchholz\nand Schütte using the so-called \\(\\Omega\\)-rule. It can be seen as\na constructive explanation of some restricted, but nontrivial, uses of\nimpredicative definitions.  \n\nType theory can be used as a foundation for mathematics, and indeed,\nit was presented as such by Russell in his 1908 paper, which appeared\nthe same year as Zermelo’s paper, presenting set theory as a foundation\nfor mathematics. \n\nIt is clear intuitively how we can explain type theory in set theory:\na type is simply interpreted as a set, and function types \\(A\n\\rightarrow B\\) can be explained using the set theoretic notion of\nfunction (as a functional relation, i.e. a set of pairs of\nelements). The type \\(A \\rightarrow o\\) corresponds to the powerset\noperation. \n\nThe other direction is more interesting. How can we explain the notion\nof sets in terms of types? There is an elegant solution, due to\nA. Miquel, which complements previous works by P. Aczel (1978) and\nwhich has also the advantage of explaining non necessarily\nwell-founded sets a la Finsler. One simply interprets a set\nas a pointed graph (where the arrow in the graph represents\nthe membership relation). This is very conveniently represented in\ntype theory, a pointed graph being simply given by a type A and a pair\nof elements \n\nWe can then define in type theory when two such sets \\(A, a, R\\) and\n\\(B, b, S\\) are equal: this is the case iff there is a bisimulation\n\\(T\\) between \\(A\\) and \\(B\\) such that \\(Tab\\) holds. A bisimulation\nis a relation \nsuch that whenever \\(Txy\\) and \\(Rxu\\) hold, there exists \\(v\\) such\nthat \\(Tuv\\) and \\(Syv\\) hold, and whenever \\(Txy\\) and \\(Ryv\\) hold,\nthere exists \\(u\\) such that \\(Tuv\\) and \\(Rxu\\) hold. We can then\ndefine the membership relation: the set represented \\(B, b, S\\) is a\nmember of the set represented by \\(A, a, R\\) iff there exists \\(a_1\\)\nsuch that \\(Ra_1a\\) and \\(A, a_1, R\\) and \\(B, b, S\\) are\nbisimilar. \n\nIt can then be checked that all the usual axioms of set theory\nextensionality, power set, union, comprehension over bounded formulae\n(and even antifoundation, so that the membership relation does not\nneed to be well-founded) hold in this simple model. (A bounded formula\nis a formula where all quantifications are of the form \\(\\forall x \\in\na\\ldots\\) or \\(\\exists x \\in a\\ldots\\)). In this way it can been shown\nthat Church’s simple type theory is equiconsistent with the\nbounded version of Zermelo’s set theory. \n\nThere are deep connections between type theory and category theory.\nWe limit ourselves to presenting two applications of type theory to\ncategory theory: the constructions of the free cartesian closed\ncategory and of the free topos (see the entry on category theory for an\nexplanation of “cartesian closed” and “topos”). \n\nFor building the free cartesian closed category, we extend simple type\ntheory with the type 1 (unit type) and the product type \\(A \\times\nB\\), for \\(A, B\\) types. The terms are extended by adding pairing\noperations and projections and a special element of type 1. As in\nLambek and Scott 1986, one can then define a notion of typed\nconversions between terms, and show that this relation is\ndecidable. One can then show (Lambek and Scott 1986) that the category\nwith types as objects and as morphisms from \\(A\\) to \\(B\\) the set of\nclosed terms of type \\(A \\rightarrow B\\) (with conversion as equality)\nis the free cartesian closed category. This can be used to show that\nequality between arrows in this category is decidable. \n\nThe theory of types of Church can also be used to build the free\ntopos. For this we take as objects pairs \\(A,E\\) with \\(A\\) type and\n\\(E\\) a partial equivalence relation, that is a closed term \\(E:A\n\\rightarrow A \\rightarrow o\\) which is symmetric and transitive. We\ntake as morphisms between \\(A, E\\) and \\(B, F\\) the relations\n\\(R:A\\rightarrow B\\rightarrow o\\) that are\nfunctional that is such that for any \\(a:A\\) satisfying \\(E a\na\\) there exists one, and only one (modulo \\(F)\\) element \\(b\\) of\n\\(B\\) such that \\(F b b\\) and \\(R a b\\). For the subobject classifier\nwe take the pair \\(o, E\\) with \\(E:o\\rightarrow o\\rightarrow o\\)\ndefined as \n\nOne can then show that this category forms a topos, indeed the free\ntopos. \n\nIt should be noted that the type theory in Lambek and Scott 1986\nuses a variation of type theory, introduced by Henkin and refined by\nP. Andrews (2002) which is to have an extensional equality as the\nonly logical connective, i.e. a polymorphic constant \n\nand to define all logical connectives from this connective and\nconstants \\(T, F : o\\). For instance, one defines  \n\nThe equality at type \\(o\\) is logical equivalence.  \n\nOne advantage of the intensional formulation is that it allows for a\ndirect notation of proofs based on \\(\\lambda\\)-calculus (Martin-Löf\n1971 and Coquand 1986). \n\nWe have seen the analogy between the operation A \\(\\rightarrow\\) A \\(\\rightarrow\\) o on\ntypes and the powerset operation on sets. In set theory, the powerset\noperation can be iterated transfinitely along the cumulative\nhierarchy. It is then natural to look for analogous transfinite\nversions of type theory. \n\nOne such extension of Church’s simple type theory is obtained by\nadding universes (Martin-Löf 1970). Adding a universe is a\nreflection process: we add a type \\(U\\) whose objects\nare the types considered so far. For Church’s simple type theory we\nwill have \n\nand, furthermore, \\(A\\) is a type if \\(A:U\\). We can then consider\ntypes such as\n \n\nand functions such as \n\nThe function id takes as argument a “small” type \\(A:U\\)\nand an element \\(x\\) of type \\(A\\), and outputs an element of type\n\\(A\\). More generally if \\(T(A)\\) is a type under the assumption\n\\(A:U\\), one can form the dependent type \n\nThat \\(M\\) is of this type means that \\(M A:T(A)\\) whenever\n\\(A:U\\). We get in this way extensions of type theory whose strength\nis similar to the one of Zermelo’s set theory (Miquel\n2001). More powerful form of universes are considered in (Palmgren\n1998). Miquel (2003) presents a version of type theory of strength\nequivalent to the one of Zermelo-Fraenkel. \n\nOne very strong form of universe is obtained by adding the axiom\n\\(U:U\\). This was suggested by P. Martin-Löf in\n1970. J.Y. Girard showed that the resulting type theory is\ninconsistent as a logical system (Girard 1972). Though it seems at first\nthat one could directly reproduce Russell’s paradox using a set of all\nsets, such a direct paradox is actually not possible due to the\ndifference between sets and types. Indeed the derivation of a\ncontradiction in such a system is subtle and has been rather indirect\n(though, as noticed in Miquel 2001, it can now be reduced to\nRussell’s paradox by representing sets as pointed graphs). J.Y. Girard\nfirst obtained his paradox for a weaker system. This paradox was\nrefined later (Coquand 1994 and Hurkens 1995). (The notion of pure\ntype system, introduced in Barendregt 1992, is convenient for\ngetting a sharp formulation of these paradoxes.) Instead of the axiom\n\\(U:U\\) one assumes only \n\nif \\(T(A) : U [A:U]\\). Notice the circularity, indeed of the same kind\nas the one that is rejected by the ramified hierarchy: we define an\nelement of type \\(U\\) by quantifying over all elements of \\(U\\). For\ninstance the type \n\nwill be the type of the polymorphic identity function. Despite this\ncircularity, J.Y. Girard was able to show normalisation for type\nsystems with this form of polymorphism. However, the extension of\nChurch’s simple type theory with polymorphism is inconsistent as a\nlogical system, i.e. all propositions (terms of type o) are\nprovable. \n\nJ.Y. Girard’s motivation for considering a type system with\npolymorphism was to extend Gödel’s Dialectica (Gödel 1958)\ninterpretation to second-order arithmetic. He proved normalisation\nusing the reducibility method, that had been introduced by Tait (1967)\nwhile analysing Gödel 1958. It is quite remarkable that the\ncircularity inherent in impredicativity does not result in\nnon-normalisable terms. (Girard’s argument was then used to show that\ncut-elimination terminates in Takeuti’s sequent calculus presented\nabove.) A similar system was introduced independently by J. Reynolds\n(1974) while analysing the notion of polymorphism in computer\nscience. \n\nMartin-Löf’s introduction of a type of all types comes from the\nidentification of the concept of propositions and types, suggested by\nthe work of Curry and Howard. It is worth recalling here his three\nmotivating points: \n\nGiven (1) and (2) we should have a type of propositions (as in simple\ntype theory), and given (3) this should also be the type of all\ntypes. Girard’s paradox shows that one cannot have (1),(2) and (3)\nsimultaneously. Martin-Löf’s choice was to take away (2),\nrestricting type theory to be predicative (and, indeed, the notion of\nuniverse appeared first in type theory as a predicative version of the\ntype of all types). The alternative choice of taking away (3) is\ndiscussed in Coquand 1986. \n\n \nThe connections between type theory, set theory and category theory\ngets a new light through the work on Univalent Foundations (Voevodsky\n2015) and the Axiom of\nUnivalence. This involves in an essential way the extension of\ntype theory described in the previous section, in particular dependent\ntypes, the view of propositions as types, and the notion of universe\nof types. These development are also relevant for discussing the\nnotion of structure, the importance of which was for instance\nemphasized in Russell 1959. \nMartin-Löf 1975 [1973] introduced a new basic type\n\\(\\mathbf{Id}_A (a,b)\\), if \\(a\\) and \\(b\\) are in the type \\(A\\),\nwhich can be thought as the type of equality proofs of the element\n\\(a\\) and \\(b\\). An important feature of this new type is that it can\nbe iterated, so that we can consider the type\n\\(\\mathbf{Id}_{\\mathbf{Id}_A (a,b)}(p,q)\\) if \\(p\\) and \\(q\\) are of\ntype \\(\\mathbf{Id}_A (a,b)\\). If we think of a type as a special kind\nof set, it is natural to conjecture that such a type of equality\nproofs is always inhabited for any two equality proofs \\(p\\) and\n\\(q\\). Indeed, intuitively, there seems to be at most an equality\nproof between two elements \\(a\\) and \\(b\\). Surprisingly, Hofmann and\nStreicher 1996 designed a model of dependent type theory where this is\nnot valid, that is a model where they can be different proofs that two\nelements are equal. In this model, a type is interpreted by\na groupoid and the type \\(\\mathbf{Id}_A (a,b)\\) by the set of\nisomorphisms between \\(a\\) and \\(b\\), set which may have more than one\nelement. The existence of this model has the consequence that it\ncannot be proved in general in type theory that an equality type has\nat most one element. This groupoid interpretation has been generalized\nin the following way, which gives an intuitive interpretation of the\nidentity type. A type is interpreted by a topological\nspace, up to homotopy, and a type \\(\\mathbf{Id}_A (a,b)\\) is\ninterpreted by the type of paths connecting \\(a\\) and\n\\(b\\). (See Awodey et al. 2013 and [HoTT 2013, Other Internet\nResources].)\n \nVoevodsky 2015 introduced the following stratification of types. (This\nstratification was motivated in part by this interpretation of a type\nas a topological space, but can be understood directly without\nreference to this interpretation.) We say that a type \\(A\\) is\na proposition if we have \\(\\mathbf{Id}_A (a,b)\\) for any\nelement \\(a\\) and \\(b\\) of \\(A\\) (this means that the type \\(A\\) has\nat most one element). We say that a type \\(A\\) is a set if\nthe type \\(\\mathbf{Id}_A (a,b)\\) is a proposition for any element\n\\(a\\) and \\(b\\) of \\(A\\). We say that a type \\(A\\) is\na groupoid if the type \\(\\mathbf{Id}_A (a,b)\\) is a set for\nany element \\(a\\) and \\(b\\) of \\(A\\). The justification of this\nterminology is that it can be shown, only using the rules of type\ntheory, that any such type can indeed be seen as a groupoid in the\nusual categorical sense, where the objects are the elements of this\ntype, the set of morphisms between \\(a\\) and \\(b\\) being represented\nby the set \\(\\mathbf{Id}_A (a,b)\\). The composition is the\nproof of transitivity of equality, and the identity morphism is the\nproof of reflexivity of equality. The fact that each morphism has an\ninverse corresponds to the fact that identity is a symmetric\nrelation. This stratification can then be extended and we can define\nwhen a type is a 2-groupoid, 3-groupoid and so on. In this view,\ntype theory appears as a vast generalization of set\ntheory, since a set is a particular kind of type.\n  \nVoevodsky 2015 introduces also a notion of\nequivalence between types, notion which generalizes in an\nuniform way the notions of logical equivalence between\npropositions, bijection between sets, categorical\nequivalence between groupoids, and so on. We say that a map\n\\(f:A\\rightarrow B\\) is an equivalence if, for any element \\(b\\) in\n\\(B\\) the type of pairs \\(a,p\\) where \\(p\\) is of type \\(\\mathbf{Id}_B\n(f a,b)\\), is a proposition and is inhabited. This expresses in a\nstrong way that an element in \\(B\\) is the image of exactly one\nelement in \\(A\\), and if \\(A\\) and \\(B\\) are sets, we recover the\nusual notion of bijection between sets. (In general if\n\\(f:A\\rightarrow B\\) is an equivalence, then we have a map\n\\(B\\rightarrow A\\), which can be thought of as the inverse of \\(f\\).)\nIt can be shown for instance that the identity map is always an\nequivalence. Let \\(\\text{Equiv}(A,B)\\) be the type of pairs \\(f,p\\) where\n\\(f:A\\rightarrow B\\) and \\(p\\) is a proof that \\(f\\) is an\nequivalence. Using the fact that the identity map is an equivalence we\nhave an element of \\(\\text{Equiv}(A,A)\\) for any type \\(A\\). This implies\nthat we have a map and the Axiom of Univalence states that this map is an\nequivalence. In particular, we have the implication and so if there is an equivalence between two small types then these types are equal.\n  This Axiom can be seen as a strong form of the extensionality\nprinciple. It indeed generalizes the Axiom of propositional\nextensionality mentioned by Church 1940, which states that two\nlogically equivalent propositions are equal. Surprisingly, it also\nimplies the Axiom of function extensionality, Axiom 10 in\nChurch 1940, which states that two pointwise equal functions are equal\n(Voevodsky 2015). It also directly implies\nthat two isomorphic sets are equal, that two categorically equivalent\ngroupoids are equal, and so one.\n This can be used to give a formulation of the notion\nof transport of structures (Bourbaki 1957) along\nequivalences. For instance, let \\(M A\\) be the type of monoid\nstructures on the set \\(A\\): this is the type of tuples \\(m, e, p\\)\nwhere \\(m\\) is a binary operation on \\(A\\) and \\(e\\) an element of\n\\(A\\) and \\(p\\) a proof that these elements satisfy the usual monoid\nlaws. The rule of substitution of equal by equal takes the form If there is a bijection between \\(A\\) and \\(B\\) they are\nequal by the Axiom of Univalence, and we can use this implication to\ntransport any monoid structure of \\(A\\) in a monoid structure\nof \\(B\\).\n We can also use this framework to refine Russell 1959 discussion on\nthe notion of structure. For instance, let Monoid be\nthe type of pairs \\(A,p\\) where \\(p\\) is an element of \\(M A\\). Two\nsuch pairs \\(A,p\\) and \\(B,q\\) are isomorphic if there exists a\nbijection \\(f\\) from \\(A\\) to \\(B\\) such that \\(q\\) is equal to the\ntransport of structure of \\(p\\) along \\(f\\). A consequence of the\nAxiom of Univalence is that two isomorphic elements of the\ntype Monoid are equal, and hence shares the same\nproperties. Notice that such a general transport of properties\nis not possible when structures are formulated in a set\ntheoretic framework. Indeed, in a set theoretic framework, it is\npossible to formulate properties using the membership relations, for\ninstance the property that the carrier set of the structure contains\nthe natural number \\(0\\), property that is not preserved in general by\nisomorphisms. Intuitively, the set theoretical description of a\nstructure is not abstract enough since we can talk about the way this\nstructure is built up. This difference between set theory and type\ntheory is yet another illustration of the characterization by\nJ.Reynolds 1983 of a type structure as a “syntactical discipline\nfor enforcing level of abstraction”.\n","contact.mail":"coquand@chalmers.se","contact.domain":"chalmers.se"}]
